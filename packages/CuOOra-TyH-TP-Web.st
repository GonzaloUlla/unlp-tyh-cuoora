WAComponent subclass: #AgregarPreguntaView	instanceVariableNames: 'cuooraSingleton loggedUser pregunta error success'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!AgregarPreguntaView commentStamp: '<historical>' prior: 0!For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cuooraSingleton:		<Object>	loggedUser:		<Object>    Implementation Points!!AgregarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderSuccessAgregarPreguntaOn: html	success		ifTrue: [ html text: 'Su pregunta ha sido registrada exitosamente' ]! !!AgregarPreguntaView methodsFor: 'rendering' stamp: 'julirios 8/29/2019 02:02:20'!renderPreguntaFormOn: html	html		tbsForm: [ html				tbsFormGroup: [ html label						for: 'inputTítulo';						with: 'Título'.					html textInput tbsFormControl						callback: [ :title | pregunta título: title ];						id: 'inputTítulo';						placeholder: 'Escriba aquí el título de su pregunta' ].			html				tbsFormGroup: [ html label						for: 'inputDesarrollo';						with: 'Desarrollo'.					html textInput tbsFormControl						callback: [ :text | pregunta texto: text ];						id: 'inputDesarrollo';						placeholder: 'Escriba aquí el desarrollo de su pregunta' ].			html				tbsFormGroup: [ html label						for: 'inputTópicos';						with: 'Tópicos'.					html textInput tbsFormControl						callback: [ :topics | self addTopics: topics ];						id: 'inputTópicos';						placeholder:							'Ingrese los tópicos de su pregunta separados por coma: tópico1,tópico2,otro tópico 3,tópico4' ].			html tbsSubmitButton				callback: [ self agregarPregunta ];				with: 'Guardar'.			html space.			html tbsSubmitButton				callback: [ self answer: loggedUser ];				with: 'Volver' ]! !!AgregarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderErrorAgregarPreguntaOn: html	error		ifTrue: [ html text: 'Error: faltan datos de su pregunta' ]! !!AgregarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderContentOn: html	self renderHeaderOn: html.	self renderPreguntaFormOn: html.	self renderErrorAgregarPreguntaOn: html.	self renderSuccessAgregarPreguntaOn: html! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!pregunta: anObject	pregunta := anObject! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser	^ loggedUser! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!pregunta	^ pregunta! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser: anUser	loggedUser := anUser.	pregunta usuario: anUser! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton	^ cuooraSingleton! !!AgregarPreguntaView methodsFor: 'accessing' stamp: 'julirios 8/29/2019 02:02:20'!resetPregunta	pregunta := Pregunta new! !!AgregarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/30/2019 00:16'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: loggedUser ];						with: [ html text: 'Atrás' ] ].			html tbsBreadcrumbSection				beActive;				with: 'Agregar pregunta'.			self renderLoggedUserOn: html ]! !!AgregarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:09'!renderLoggedUserOn: html	loggedUser		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (PerfilUsuarioView usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ loggedUser := nil.							self call: (AgregarUsuarioView cuooraSingleton: self cuooraSingleton) ];						with: 'Cerrar sesión' ] ]! !!AgregarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ].	html		tbsPageHeader: [ html				heading: [ html text: 'Nueva pregunta'.					html space.					html small: 'Ingrese título, desarrollo y tópicos de la pregunta a agregar' ] ]! !!AgregarPreguntaView methodsFor: 'initialization' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!initialize	super initialize.	pregunta := Pregunta new.	error := false.	success := false! !!AgregarPreguntaView methodsFor: 'updating' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!AgregarPreguntaView methodsFor: 'controlling' stamp: 'julirios 8/29/2019 02:02:20'!agregarPregunta	self validateAgregarPregunta		ifTrue: [ pregunta usuario: loggedUser.			cuooraSingleton agregarPregunta: pregunta.			success := true ]		ifFalse: [ success := false ].	self resetPregunta! !!AgregarPreguntaView methodsFor: 'controlling' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!validateAgregarPregunta	"Checks required fields for pregunta"	error := pregunta título trim isEmpty		or: [ pregunta texto trim isEmpty or: pregunta conocerTópicosRelacionados isEmpty ].	^ error not! !!AgregarPreguntaView methodsFor: 'controlling' stamp: 'julirios 8/29/2019 02:02:20'!parseAndGet: stringOfTopics	"Parses a string with comma-separated topics returning CuOOra's Topics as objects"	| topics |	topics := OrderedCollection new.	stringOfTopics		splitOn: ','		do: [ :topic | topics add: (cuooraSingleton getOrCreateTópico: topic) ].	^ topics! !!AgregarPreguntaView methodsFor: 'controlling' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!addTopics: stringOfTopics	"Add topics to pregunta"	(self parseAndGet: stringOfTopics) do: [ :topic | pregunta agregarTópicoRelacionado: topic ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AgregarPreguntaView class	instanceVariableNames: ''!!AgregarPreguntaView class methodsFor: 'instance creation' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton: cuoora loggedUser: unUsuario	"Constructor de AgregarPreguntaView"	| nuevaAgregarPreguntaView |	nuevaAgregarPreguntaView := self new.	nuevaAgregarPreguntaView cuooraSingleton: cuoora.	nuevaAgregarPreguntaView loggedUser: unUsuario.	^ nuevaAgregarPreguntaView! !WAComponent subclass: #AgregarRespuestaView	instanceVariableNames: 'preguntaView cuooraSingleton loggedUser respuesta error success'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!AgregarRespuestaView commentStamp: '<historical>' prior: 0!asd!!AgregarRespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderPreguntaOn: html	html render: preguntaView! !!AgregarRespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderSuccessAgregarRespuestaOn: html	success		ifTrue: [ html text: 'Su respuesta ha sido registrada exitosamente' ]! !!AgregarRespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderRespuestaFormOn: html	html		tbsForm: [ html				tbsFormGroup: [ html label						for: 'inputRespuesta';						with: 'Respuesta'.					html textInput tbsFormControl						callback: [ :text | respuesta texto: text ];						id: 'inputRespuesta';						placeholder: 'Escriba aquí el texto de su respuesta' ].			html tbsSubmitButton				callback: [ self agregarRespuesta ];				with: 'Guardar'.			html space.			html tbsSubmitButton				callback: [ self answer: loggedUser ];				with: 'Volver' ]! !!AgregarRespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderErrorAgregarRespuestaOn: html	error		ifTrue: [ html text: 'Error: falta redactar su respuesta' ]! !!AgregarRespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderContentOn: html	self renderHeaderOn: html.	self renderPreguntaOn: html.	self renderRespuestaFormOn: html.	self renderErrorAgregarRespuestaOn: html.	self renderSuccessAgregarRespuestaOn: html! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'julirios 8/29/2019 02:02:20'!resetRespuesta	respuesta := Respuesta new! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView: anObject	preguntaView := anObject! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser	^ loggedUser! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView	^ preguntaView! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser: anUser	loggedUser := anUser.	respuesta usuario: anUser.! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!respuesta	^ respuesta! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton	^ cuooraSingleton! !!AgregarRespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!respuesta: anObject	respuesta := anObject! !!AgregarRespuestaView methodsFor: 'updating' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!AgregarRespuestaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: loggedUser ];						with: [ html text: 'Consultar pregunta' ] ].			html tbsBreadcrumbSection				beActive;				with: 'Agregar respuesta'.			self renderLoggedUserOn: html ]! !!AgregarRespuestaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:09'!renderLoggedUserOn: html	loggedUser		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (PerfilUsuarioView usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ loggedUser := nil.							self call: (AgregarUsuarioView cuooraSingleton: self cuooraSingleton) ];						with: 'Cerrar sesión' ] ]! !!AgregarRespuestaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ].	html		tbsPageHeader: [ html				heading: [ html text: 'Nueva respuesta'.					html space.					html small: 'Ingrese el texto de la respuesta a agregar' ] ]! !!AgregarRespuestaView methodsFor: 'initialization' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!initialize	super initialize.	respuesta := Respuesta new.	error := false.	success := false! !!AgregarRespuestaView methodsFor: 'controlling' stamp: 'julirios 8/29/2019 02:02:20'!agregarRespuesta	self validateAgregarRespuesta		ifTrue: [ respuesta usuario: loggedUser.			respuesta preguntaReferida: preguntaView pregunta.			cuooraSingleton agregarRespuesta: respuesta.			success := true ]		ifFalse: [ success := false ].	self resetRespuesta! !!AgregarRespuestaView methodsFor: 'controlling' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!validateAgregarRespuesta	"Checks required fields for respuesta"	error := respuesta texto trim isEmpty.	^ error not! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AgregarRespuestaView class	instanceVariableNames: ''!!AgregarRespuestaView class methodsFor: 'instance-creation' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton: cuoora loggedUser: unUsuario	"Constructor de AgregarRespuestaView"	| nuevaAgregarRespuestaView |	nuevaAgregarRespuestaView := self new.	nuevaAgregarRespuestaView cuooraSingleton: cuoora.	nuevaAgregarRespuestaView loggedUser: unUsuario.	^ nuevaAgregarRespuestaView! !!AgregarRespuestaView class methodsFor: 'instance-creation' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView: unaPreguntaView cuooraSingleton: cuoora loggedUser: unUsuario	"Constructor de AgregarRespuestaView"	| nuevaAgregarRespuestaView |	nuevaAgregarRespuestaView := self new.	nuevaAgregarRespuestaView preguntaView: unaPreguntaView.	nuevaAgregarRespuestaView cuooraSingleton: cuoora.	nuevaAgregarRespuestaView loggedUser: unUsuario.	^ nuevaAgregarRespuestaView! !WAComponent subclass: #AgregarUsuarioView	instanceVariableNames: 'cuooraSingleton usuarioLogin errorLogin'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!AgregarUsuarioView commentStamp: '<historical>' prior: 0!asd!!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!usuarioLogin: anObject	usuarioLogin := anObject! !!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!errorLogin	^ errorLogin! !!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!errorLogin: anObject	errorLogin := anObject! !!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!usuarioLogin	^ usuarioLogin! !!AgregarUsuarioView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!cuooraSingleton	^ cuooraSingleton! !!AgregarUsuarioView methodsFor: 'updating' stamp: 'GitHub 8/22/2019 00:06:41'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!AgregarUsuarioView methodsFor: 'controlling' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loginUsuario: unUsuario	^ cuooraSingleton validarUsuarioContraseña: unUsuario! !!AgregarUsuarioView methodsFor: 'controlling' stamp: 'GitHub 8/22/2019 00:06:41'!limpiarUsuario	usuarioLogin := Usuario new.	errorLogin := false! !!AgregarUsuarioView methodsFor: 'controlling' stamp: 'GitHub 8/22/2019 00:06:41'!validateLoginUsuario: unUsuario	(self loginUsuario: unUsuario)		ifNil: [ errorLogin := true ]		ifNotNil: [ self limpiarUsuario.			self answer: (self loginUsuario: unUsuario) ]! !!AgregarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderRegistrationFormOn: html	html		tbsForm: [ html				tbsFormGroup: [ html label						for: 'inputUser';						with: 'Usuario'.					html textInput tbsFormControl						callback: [ :user | usuarioLogin nombre: user ];						id: 'inputUser';						placeholder: 'Ingresar email' ].			html				tbsFormGroup: [ html label						for: 'inputPassword';						with: 'Contraseña'.					html passwordInput tbsFormControl						callback: [ :password | usuarioLogin contraseña: password ];						id: 'inputPassword';						placeholder: 'Ingresar contraseña' ].			self renderSubmitButtonOn: html.			html space.			html tbsSubmitButton				callback: [ self answer: nil ];				with: 'Cancelar' ]! !!AgregarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderSubmitButtonOn: html	html tbsSubmitButton		callback: [ self validateLoginUsuario: usuarioLogin ];		with: 'Iniciar sesión'! !!AgregarUsuarioView methodsFor: 'rendering' stamp: 'GitHub 8/22/2019 00:06:41'!renderErrorLoginOn: html	errorLogin		ifTrue: [ html text: 'Error: los datos ingresados no corresponden a un usuario registrado' ]! !!AgregarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderContentOn: html	self renderHeaderOn: html heading: 'Iniciar sesión'.	self renderRegistrationFormOn: html.	self renderErrorLoginOn: html.	html break.	self renderSignupLinkOn: html! !!AgregarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderSignupLinkOn: html	html anchor		callback: [ self answer: (self call: (RegistrarUsuarioView cuooraInstance: cuooraSingleton)) ];		with: [ html text: '¿Aún no está registrado?' ]! !!AgregarUsuarioView methodsFor: 'initialization' stamp: 'GitHub 8/22/2019 00:06:41'!initialize	super initialize.	usuarioLogin := Usuario new.	errorLogin := false! !!AgregarUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderHeaderOn: html heading: aHeadingString	html div		class: #header;		with: [ self renderTopHeaderOn: html heading: aHeadingString ].	html		tbsPageHeader: [ html				heading: [ html text: aHeadingString.					html space.					html small: 'Ingrese usuario y contraseña' ] ]! !!AgregarUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:08'!renderTopHeaderOn: html heading: aHeadingString	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: nil ];						with: [ html text: 'Atrás' ] ].			html tbsBreadcrumbSection				beActive;				with: aHeadingString ]! !!AgregarUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ].	html		tbsPageHeader: [ html				heading: [ html text: 'Iniciar sesión'.					html space.					html small: 'Ingrese usuario y contraseña' ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AgregarUsuarioView class	instanceVariableNames: ''!!AgregarUsuarioView class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!cuooraSingleton: unCuooraSingleton	"Constructor de AgregarUsuarioView"	| nuevaAgregarUsuarioView |	nuevaAgregarUsuarioView := self new.	nuevaAgregarUsuarioView cuooraSingleton: unCuooraSingleton.	^ nuevaAgregarUsuarioView! !WAComponent subclass: #ConsultarPreguntaView	instanceVariableNames: 'cuooraSingleton preguntaView loggedUser'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!ConsultarPreguntaView commentStamp: '<historical>' prior: 0!For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	loggedUser:		<Object>	preguntaView:		<Object>    Implementation Points!!ConsultarPreguntaView methodsFor: 'updating' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!ConsultarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/30/2019 00:17'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: loggedUser ];						with: [ html text: 'Atrás' ] ].			html tbsBreadcrumbSection				beActive;				with: 'Consultar pregunta'.			self renderLoggedUserOn: html ]! !!ConsultarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:10'!renderLoggedUserOn: html	loggedUser		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (PerfilUsuarioView usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ loggedUser := nil.							self call: (AgregarUsuarioView cuooraSingleton: self cuooraSingleton) ];						with: 'Cerrar sesión' ] ]! !!ConsultarPreguntaView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ]! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView: anObject	preguntaView := anObject! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser	^ loggedUser! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView	^ preguntaView! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser: anObject	loggedUser := anObject! !!ConsultarPreguntaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraSingleton	^ cuooraSingleton! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderPreguntaOn: html	html render: preguntaView! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/29/2019 19:08'!renderRespuestasOn: html	preguntaView pregunta conocerRespuestas		do: [ :eachRespuesta | 			html render: (RespuestaView respuesta: eachRespuesta loggedUser: loggedUser).			self renderPerfilUsuarioButtonOn: html usuarioPerfil: eachRespuesta usuario ]! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderBackButtonOn: html	html		tbsForm: [ html tbsSubmitButton				callback: [ self answer: loggedUser ];				with: [ html tbsGlyphIcon iconArrowLeft.					html text: ' Volver' ] ]! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 00:08'!renderPerfilUsuarioButtonOn: html usuarioPerfil: unUsuario	html		tbsForm: [ html tbsSubmitButton				callback: [ (self call: (PerfilUsuarioView usuarioPerfil: unUsuario loggedUser: loggedUser cuooraSingleton: cuooraSingleton)) ifNil: [ self answer: nil ] ];				with: [ html tbsGlyphIcon iconArrowRight.					html text: ' Ver perfil de ' , unUsuario nombre ] ]! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderAgregarRespuestaButtonOn: html	html		tbsForm: [ html tbsSubmitButton				callback: [ loggedUser := self call: (AgregarRespuestaView preguntaView: preguntaView  cuooraSingleton: cuooraSingleton loggedUser: loggedUser). ];				with: [ html tbsGlyphIcon iconPlus.					html text: ' Agregar respuesta' ] ]! !!ConsultarPreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/29/2019 23:54'!renderContentOn: html	self renderHeaderOn: html.	self renderAgregarRespuestaButtonOn: html.	html space.	self renderPreguntaOn: html.	self renderPerfilUsuarioButtonOn: html usuarioPerfil: preguntaView pregunta usuario.	html break.	self renderRespuestasOn: html.	html break.	self renderBackButtonOn: html! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConsultarPreguntaView class	instanceVariableNames: ''!!ConsultarPreguntaView class methodsFor: 'instance creation' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!preguntaView: unaPreguntaView cuooraSingleton: cuoora loggedUser: unUsuario	"Constructor de ConsultarPreguntaView"	| nuevaConsultarPreguntaView |	nuevaConsultarPreguntaView := self new.	nuevaConsultarPreguntaView preguntaView: unaPreguntaView.	nuevaConsultarPreguntaView cuooraSingleton: cuoora.	nuevaConsultarPreguntaView loggedUser: unUsuario.	^ nuevaConsultarPreguntaView! !WAComponent subclass: #ConsultarUsuariosView	instanceVariableNames: 'cuooraSingleton loggedUser'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!ConsultarUsuariosView commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cuooraSingleton:		<Object>	loggedUser:		<Object>	preguntaView:		<Object>    Implementation Points!!ConsultarUsuariosView methodsFor: 'updating' stamp: 'GonzaloUlla 10/11/2019 00:29'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!ConsultarUsuariosView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 00:29'!renderBackButtonOn: html	html		tbsForm: [ html tbsSubmitButton				callback: [ self answer: loggedUser ];				with: [ html tbsGlyphIcon iconArrowLeft.					html text: ' Volver' ] ]! !!ConsultarUsuariosView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 01:00'!renderPerfilUsuarioButtonOn: html usuarioPerfil: unUsuario	html tbsSubmitButton		callback: [ loggedUser := self call: (PerfilUsuarioView usuarioPerfil: unUsuario loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];		with: [ html tbsGlyphIcon iconArrowRight.			html text: ' Perfil' ]! !!ConsultarUsuariosView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 01:01'!renderContentOn: html	self renderHeaderOn: html.	html		tbsListGroup: [ self cuooraSingleton conocerUsuarios				do: [ :usuario | 					html						tbsLinkifyListGroupItem: [ html								tbsForm: [ self renderPerfilUsuarioButtonOn: html usuarioPerfil: usuario.									html space: 5.									html text: usuario nombre ] ] ] ].	self renderBackButtonOn: html! !!ConsultarUsuariosView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 00:33'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: loggedUser ];						with: [ html text: 'Atrás' ] ].			html tbsBreadcrumbSection				beActive;				with: 'Consultar usuarios'.			self renderLoggedUserOn: html ]! !!ConsultarUsuariosView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:06'!renderLoggedUserOn: html	loggedUser		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (PerfilUsuarioView usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ loggedUser := nil.							self call: (AgregarUsuarioView cuooraSingleton: self cuooraSingleton) ];						with: 'Cerrar sesión' ] ]! !!ConsultarUsuariosView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 00:32'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ].	html		tbsPageHeader: [ html				heading: [ html text: 'Usuarios registrados'.					html space.					html small: 'Acceda al perfil de los usuarios de CuOOra' ] ]! !!ConsultarUsuariosView methodsFor: 'accessing' stamp: 'GonzaloUlla 10/11/2019 00:29'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!ConsultarUsuariosView methodsFor: 'accessing' stamp: 'GonzaloUlla 10/11/2019 00:29'!loggedUser	^ loggedUser! !!ConsultarUsuariosView methodsFor: 'accessing' stamp: 'GonzaloUlla 10/11/2019 00:29'!loggedUser: anObject	loggedUser := anObject! !!ConsultarUsuariosView methodsFor: 'accessing' stamp: 'GonzaloUlla 10/11/2019 00:29'!cuooraSingleton	^ cuooraSingleton! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConsultarUsuariosView class	instanceVariableNames: ''!!ConsultarUsuariosView class methodsFor: 'instance creation' stamp: 'GonzaloUlla 10/11/2019 00:30'!cuooraSingleton: cuoora loggedUser: unUsuario	"Constructor de ConsultarUsuariosView"	| nuevaConsultarUsuariosView |	nuevaConsultarUsuariosView := self new.	nuevaConsultarUsuariosView cuooraSingleton: cuoora.	nuevaConsultarUsuariosView loggedUser: unUsuario.	^ nuevaConsultarUsuariosView! !WAComponent subclass: #CuOOraHomeView	instanceVariableNames: 'cuooraSingleton loggedUser agregarUsuarioView preguntaViews perfilUsuarioView'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!CuOOraHomeView commentStamp: 'GonzaloUlla 8/19/2019 14:24' prior: 0!Para registrar la aplicación, evaluar la siguiente expresión:WAAdmin register: self asApplicationAt: 'CuOOra'Class part:  "Represento una vista de CuOOra".Responsibility part: "Lo que hago:  - "Collaborators Part: " - "!!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 00:01'!renderPreguntaButtonsOn: html preguntaView: unaPreguntaView usuarioPerfil: unUsuarioPerfil	html		tbsForm: [ self renderConsultarPreguntaButtonOn: html preguntaView: unaPreguntaView.			html space.			self renderPerfilUsuarioButtonOn: html usuarioPerfil: unUsuarioPerfil ]! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 00:00'!renderConsultarPreguntaButtonOn: html preguntaView: unaPreguntaView	html tbsSubmitButton		callback: [ loggedUser := self call: (ConsultarPreguntaView preguntaView: unaPreguntaView cuooraSingleton: cuooraSingleton loggedUser: loggedUser).			self initializePreguntaViews ];		with: [ html tbsGlyphIcon iconArrowRight.			html text: ' Ver respuestas' ]! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 00:34'!renderAgregarPreguntaButtonOn: html	html tbsSubmitButton		callback: [ loggedUser := self call: (AgregarPreguntaView cuooraSingleton: cuooraSingleton loggedUser: loggedUser).			self initializePreguntaViews ];		with: [ html tbsGlyphIcon iconPlus.			html text: ' Hacer una nueva pregunta' ]! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 00:35'!renderConsultarUsuariosButtonOn: html	html tbsSubmitButton		callback: [ loggedUser := self call: (ConsultarUsuariosView cuooraSingleton: cuooraSingleton loggedUser: loggedUser) ];		with: [ html tbsGlyphIcon iconArrowRight.			html text: ' Consultar usuarios' ]! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 00:08'!renderPerfilUsuarioButtonOn: html usuarioPerfil: unUsuario	html tbsSubmitButton		callback: [ loggedUser := self call: (PerfilUsuarioView usuarioPerfil: unUsuario loggedUser: loggedUser cuooraSingleton: cuooraSingleton).			self initializePreguntaViews ];		with: [ html tbsGlyphIcon iconArrowRight.			html text: ' Ver perfil de ' , unUsuario nombre ]! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 01:10'!renderContentOn: html	self initializePreguntaViews.	self renderHeaderOn: html.	self renderBodyOn: html! !!CuOOraHomeView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/11/2019 00:34'!renderBodyOn: html	loggedUser		ifNotNil: [ html				tbsForm: [ self renderAgregarPreguntaButtonOn: html.					html space.					self renderConsultarUsuariosButtonOn: html ] ].	html space.	preguntaViews		ifNotNil: [ preguntaViews				do: [ :eachPreguntaView | 					html break.					html render: eachPreguntaView.					self renderPreguntaButtonsOn: html preguntaView: eachPreguntaView usuarioPerfil: eachPreguntaView pregunta usuario.					html break ] ]! !!CuOOraHomeView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!children	| children |	children := OrderedCollection with: agregarUsuarioView.	preguntaViews ifNotNil: [ preguntaViews do: [ :eachPreguntaView | children add: eachPreguntaView ] ].	^ children! !!CuOOraHomeView methodsFor: 'updating' stamp: 'GitHub 8/22/2019 00:06:41'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!CuOOraHomeView methodsFor: 'initialization' stamp: 'GitHub 8/22/2019 00:06:41'!initialize	super initialize.	cuooraSingleton := CuOOra new cuooraSingleton.	loggedUser := nil.	agregarUsuarioView := AgregarUsuarioView cuooraSingleton: cuooraSingleton.	self initializePreguntaViews! !!CuOOraHomeView methodsFor: 'initialization' stamp: 'julirios 8/29/2019 02:02:20'!initializePreguntaViews	loggedUser		ifNil: [ preguntaViews := nil ]		ifNotNil: [ preguntaViews := SortedCollection new.			(loggedUser conocerPreguntasRelevantes size > 5)				ifTrue: [ 1 to: 5 do: [ :i | preguntaViews add: (PreguntaView pregunta: (loggedUser conocerPreguntasRelevantes asOrderedCollection at: i) loggedUser: loggedUser) ] ];				ifFalse: [ loggedUser conocerPreguntasRelevantes do: [ :eachPregunta | preguntaViews add: (PreguntaView pregunta: eachPregunta loggedUser: loggedUser) ] ] ]! !!CuOOraHomeView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html tbsBreadcrumbSection				beActive;				with: [ html text: 'Home' ].			self renderLoggedUserOn: html ]! !!CuOOraHomeView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/30/2019 00:07'!renderLoggedUserOn: html	loggedUser		ifNil: [ html div				class: 'pull-right';				with: [ html text: 'Sin identificar'.					html space: 5.					html anchor						callback: [ loggedUser := self call: agregarUsuarioView.							self initializePreguntaViews ];						with: 'Iniciar sesión' ] ]		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (PerfilUsuarioView usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ loggedUser := nil.							self initializePreguntaViews ];						with: 'Cerrar sesión' ] ]! !!CuOOraHomeView methodsFor: 'rendering-header' stamp: 'GitHub 8/22/2019 00:06:41'!renderHeaderOn: html	html div		class: #header;		with: [ self renderTopHeaderOn: html ].	html		tbsPageHeader: [ html				heading: [ html text: 'Bienvenido a CuOOra'.					html space.					html small: 'Plataforma de preguntas y respuestas' ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOraHomeView class	instanceVariableNames: ''!!CuOOraHomeView class methodsFor: 'initialization' stamp: 'julirios 8/29/2019 02:02:20'!initialize	(WAAdmin register: self asApplicationAt: 'CuOOra')		addLibrary: TBSDeploymentLibrary;		exceptionHandler: WADebugErrorHandler! !WAComponent subclass: #PerfilUsuarioView	instanceVariableNames: 'perfilUsuario usuarioPerfil loggedUser preguntaViews cuooraSingleton'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!PerfilUsuarioView commentStamp: '<historical>' prior: 0!asd!!PerfilUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 00:24'!renderConsultarPreguntaButtonOn: html preguntaView: unaPreguntaView	html		tbsForm: [ html tbsSubmitButton				callback: [ loggedUser := self call: (ConsultarPreguntaView preguntaView: unaPreguntaView cuooraSingleton: cuooraSingleton loggedUser: loggedUser).					loggedUser ifNil: [ self answer: nil ] ifNotNil: [ self initializePreguntaViews ] ];				with: [ html tbsGlyphIcon iconArrowRight.					html text: ' Ver respuestas' ] ]! !!PerfilUsuarioView methodsFor: 'rendering' stamp: 'julirios 8/22/2019 00:29:56'!renderContentOn: html	self renderHeaderOn: html.	self renderBodyOn: html! !!PerfilUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/30/2019 09:55'!renderBodyOn: html	self initializePreguntaViews.	html div		with: [ preguntaViews				ifNotNil: [ preguntaViews						do: [ :eachPreguntaView | 							html render: eachPreguntaView.							self renderConsultarPreguntaButtonOn: html preguntaView: eachPreguntaView.							html break ] ] ]! !!PerfilUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/30/2019 00:20'!renderHeaderOn: html	loggedUser		ifNotNil: [ html div				class: #header;				with: [ self renderTopHeaderOn: html ].			html				tbsPageHeader: [ html						heading: [ html text: 'Preguntas de '.							html text: usuarioPerfil nombre.							html space.							usuarioPerfil = loggedUser								ifFalse: [ (loggedUser esSeguidorDe: usuarioPerfil)										ifTrue: [ html												small: [ html text: 'Siguiendo'.													html space.													html anchor														callback: [ loggedUser dejarDeSeguirA: usuarioPerfil ];														with: 'Dejar de seguir' ] ]										ifFalse: [ html												small: [ html anchor														callback: [ loggedUser seguirA: usuarioPerfil ];														with: 'Seguir' ] ] ] ] ] ]! !!PerfilUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 10/11/2019 01:10'!renderLoggedUserOn: html	loggedUser		ifNotNil: [ html div				class: 'pull-right';				with: [ html anchor						callback: [ self call: (self class usuarioPerfil: loggedUser loggedUser: loggedUser cuooraSingleton: cuooraSingleton) ];						with: loggedUser nombre.					html space: 5.					html anchor						callback: [ self call: (AgregarUsuarioView cuooraSingleton: self cuooraSingleton) ];						with: 'Cerrar sesión' ] ]! !!PerfilUsuarioView methodsFor: 'rendering-header' stamp: 'GonzaloUlla 8/30/2019 00:17'!renderTopHeaderOn: html	html		tbsBreadcrumb: [ html				tbsBreadcrumbSection: [ html anchor						callback: [ self answer: loggedUser ];						with: [ html text: 'Atrás' ] ].			html tbsBreadcrumbSection				beActive;				with: 'Perfil Usuario'.			self renderLoggedUserOn: html ]! !!PerfilUsuarioView methodsFor: 'updating' stamp: 'GonzaloUlla 8/28/2019 01:36'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CuOOra'! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/30/2019 00:09'!cuooraSingleton	^ cuooraSingleton! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/30/2019 00:09'!cuooraSingleton: anObject	cuooraSingleton := anObject! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!perfilUsuario: anObject	perfilUsuario := anObject! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!loggedUser	^ loggedUser! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!usuarioPerfil	^ usuarioPerfil! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!loggedUser: anObject	loggedUser := anObject! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!perfilUsuario	^ perfilUsuario! !!PerfilUsuarioView methodsFor: 'accessing' stamp: 'julirios 8/22/2019 00:29:56'!usuarioPerfil: anObject	usuarioPerfil := anObject! !!PerfilUsuarioView methodsFor: 'initialization' stamp: 'julirios 8/22/2019 00:29:56'!initialize	super initialize.	usuarioPerfil := Usuario new.	loggedUser := Usuario new.! !!PerfilUsuarioView methodsFor: 'initialization' stamp: 'julirios 8/22/2019 00:29:56'!initializePreguntaViews	preguntaViews := OrderedCollection new.	usuarioPerfil conocerPreguntas		do:			[ :eachPregunta | preguntaViews add: (PreguntaView pregunta: eachPregunta loggedUser: loggedUser  ) ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilUsuarioView class	instanceVariableNames: ''!!PerfilUsuarioView class methodsFor: 'instance creation' stamp: 'GonzaloUlla 8/30/2019 00:09'!usuarioPerfil: unUsuario loggedUser: otroUsuario cuooraSingleton: unCuooraSingleton	"Constructor de PerfilUsuarioView"	| nuevaPerfilUsuarioView |	nuevaPerfilUsuarioView := self new.	nuevaPerfilUsuarioView usuarioPerfil: unUsuario.	nuevaPerfilUsuarioView loggedUser: otroUsuario.	nuevaPerfilUsuarioView cuooraSingleton: unCuooraSingleton.	^ nuevaPerfilUsuarioView! !WAComponent subclass: #PreguntaView	instanceVariableNames: 'pregunta loggedUser'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!PreguntaView commentStamp: '<historical>' prior: 0!For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	pregunta:		<Object>    Implementation Points!!PreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderLikeButtonsOn: html	html anchor		callback: [ pregunta agregarVotoPositivo: (Voto usuario: loggedUser entrada: pregunta) ];		with: [ html tbsGlyphIcon iconThumbsUp.			html text: 'Like' ].	html space.	html anchor		callback: [ pregunta agregarVotoNegativo: (Voto usuario: loggedUser entrada: pregunta) ];		with: [ html tbsGlyphIcon iconThumbsDown.			html text: 'Dislike' ]! !!PreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderPreguntaDescriptionOn: html	html paragraph: pregunta texto.	html text: 'Tópicos:'.	html space.	pregunta conocerTópicosRelacionados do: [ :eachTopic | html text: eachTopic nombre , ', ' ].	html break.	html text: 'Realizada por: ' , pregunta usuario nombre.	html text: ' | Fecha: '.	html text: pregunta fechaCreación asStringYMDHM.	html break.	html text: 'Respuestas: '.	html text: pregunta conocerRespuestas size.	html text: ' | Likes: '.	html text: pregunta conocerVotosPositivos size.	html text: ' | Dislikes: '.	html text: pregunta conocerVotosNegativos size.	html break! !!PreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderContentOn: html	html tbsPanel beDefault		with: [ html				tbsPanelHeading: pregunta título;				tbsPanelBody: [ self renderPanelBodyOn: html ] ]! !!PreguntaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderPanelBodyOn: html	self renderPreguntaDescriptionOn: html.	self renderLikeButtonsOn: html! !!PreguntaView methodsFor: 'initialization' stamp: 'julirios 8/22/2019 00:29:56'!initialize	super initialize.	pregunta := Pregunta new.! !!PreguntaView methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!= otraPreguntaView	^ self pregunta fechaCreación = otraPreguntaView pregunta fechaCreación! !!PreguntaView methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!>= otraPreguntaView	^ self pregunta fechaCreación <= otraPreguntaView pregunta fechaCreación! !!PreguntaView methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!> otraPreguntaView	^ self pregunta fechaCreación < otraPreguntaView pregunta fechaCreación! !!PreguntaView methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!< otraPreguntaView	^ self pregunta fechaCreación > otraPreguntaView pregunta fechaCreación! !!PreguntaView methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!<= otraPreguntaView	^ self pregunta fechaCreación >= otraPreguntaView pregunta fechaCreación! !!PreguntaView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!pregunta: anObject	pregunta := anObject! !!PreguntaView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!loggedUser	^ loggedUser! !!PreguntaView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!pregunta	^ pregunta! !!PreguntaView methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!loggedUser: anObject	loggedUser := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaView class	instanceVariableNames: ''!!PreguntaView class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!pregunta: unaPregunta loggedUser: unUsuario	"Constructor de PreguntaView"	| nuevaPreguntaView |	nuevaPreguntaView := self new.	nuevaPreguntaView pregunta: unaPregunta.	nuevaPreguntaView loggedUser: unUsuario.	^ nuevaPreguntaView! !AgregarUsuarioView subclass: #RegistrarUsuarioView	instanceVariableNames: 'cuooraInstance'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!RegistrarUsuarioView commentStamp: '<historical>' prior: 0!For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!RegistrarUsuarioView methodsFor: 'initialization' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!initialize	super initialize.	cuooraInstance := nil! !!RegistrarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderSubmitButtonOn: html	html tbsSubmitButton		callback: [ self validateSignupUsuario: usuarioLogin ];		with: 'Registrar usuario'! !!RegistrarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderContentOn: html	self renderHeaderOn: html heading: 'Registrar usuario'.	self renderRegistrationFormOn: html.	self renderErrorSignupOn: html! !!RegistrarUsuarioView methodsFor: 'rendering' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!renderErrorSignupOn: html	errorLogin		ifTrue: [ html text: 'Error: datos faltantes o usuario ya registrado' ]! !!RegistrarUsuarioView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraInstance	^ cuooraInstance! !!RegistrarUsuarioView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraInstance: anObject	cuooraInstance := anObject! !!RegistrarUsuarioView methodsFor: 'controlling' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loginUsuario: unUsuario	^ cuooraInstance conocerUsuarioSiExiste: unUsuario! !!RegistrarUsuarioView methodsFor: 'controlling' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!registrarUsuario: unUsuario	self cuooraInstance agregarUsuario: unUsuario.	^ unUsuario! !!RegistrarUsuarioView methodsFor: 'controlling' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!validateSignupUsuario: unUsuario	unUsuario nombre trim isEmpty		ifTrue: [ self errorLogin: true ]		ifFalse: [ unUsuario contraseña trim isEmpty				ifTrue: [ self errorLogin: true ]				ifFalse: [ self errorLogin: false ] ].	self errorLogin		ifFalse: [ (self loginUsuario: unUsuario)				ifNil: [ self answer: (self registrarUsuario: unUsuario) ]				ifNotNil: [ errorLogin := true ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RegistrarUsuarioView class	instanceVariableNames: ''!!RegistrarUsuarioView class methodsFor: 'instance creation' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!cuooraInstance: aCuooraInstance	"Constructor de RegistrarUsuarioView"	| nuevaRegistrarUsuarioView |	nuevaRegistrarUsuarioView := self new.	nuevaRegistrarUsuarioView cuooraInstance: aCuooraInstance.	^ nuevaRegistrarUsuarioView! !WAComponent subclass: #RespuestaView	instanceVariableNames: 'respuesta loggedUser'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Web'!!RespuestaView commentStamp: '<historical>' prior: 0!For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	respuesta:		<Object>    Implementation Points!!RespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderLikeButtonsOn: html	html anchor		callback: [ respuesta agregarVotoPositivo: (Voto usuario: loggedUser entrada: respuesta) ];		with: [ html tbsGlyphIcon iconThumbsUp.			html text: 'Like' ].	html space.	html anchor		callback: [ respuesta agregarVotoNegativo: (Voto usuario: loggedUser entrada: respuesta) ];		with: [ html tbsGlyphIcon iconThumbsDown.			html text: 'Dislike' ]! !!RespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderRespuestaDescriptionOn: html	html paragraph: respuesta texto.	html text: 'Fecha: '.	html text: respuesta fechaCreación asStringYMDHM.	html break.	html text: 'Likes: '.	html text: respuesta conocerVotosPositivos size.	html text: ' | Dislikes: '.	html text: respuesta conocerVotosNegativos size.	html break! !!RespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderContentOn: html	html tbsPanel beDefault		with: [ html				tbsPanelHeading: 'Respuesta de ' , respuesta usuario nombre;				tbsPanelBody: [ self renderPanelBodyOn: html ] ]! !!RespuestaView methodsFor: 'rendering' stamp: 'GonzaloUlla 10/10/2019 23:44:44'!renderPanelBodyOn: html	self renderRespuestaDescriptionOn: html.	self renderLikeButtonsOn: html! !!RespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser	^ loggedUser! !!RespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!loggedUser: anObject	loggedUser := anObject! !!RespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!respuesta	^ respuesta! !!RespuestaView methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!respuesta: anObject	respuesta := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RespuestaView class	instanceVariableNames: ''!!RespuestaView class methodsFor: 'accessing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!respuesta: unaRespuesta loggedUser: unUsuario	"Constructor de RespuestaView"	| nuevaRespuestaView |	nuevaRespuestaView := self new.	nuevaRespuestaView respuesta: unaRespuesta.	nuevaRespuestaView loggedUser: unUsuario.	^ nuevaRespuestaView! !CuOOraHomeView initialize!