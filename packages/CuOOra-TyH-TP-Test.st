TestCase subclass: #CuOOraTest	instanceVariableNames: 'cuoora'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!CuOOraTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de CuOOra".Responsibility part: "Lo que hago:  Permito probar una CuOOra"Collaborators Part: "Modelo CuOOra"!!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicos	| tópico1 tópico2 tópico3 |	"Agregar un tópico"	self assert: cuoora conocerTópicos isEmpty.	tópico1 := Tópico nombre: 't1' descripción: 't1'.	cuoora agregarUsuario: tópico1.	self deny: cuoora conocerUsuarios isEmpty.	self assert: cuoora conocerUsuarios size equals: 1.	self assert: (cuoora conocerUsuarios includes: tópico1).	"Agregar otro tópico"	tópico2 := Tópico nombre: 't2' descripción: 't2'.	cuoora agregarUsuario: tópico2.	self assert: cuoora conocerUsuarios size equals: 2.	self assert: (cuoora conocerUsuarios includes: tópico2).	"try to modify tópicos"	tópico3 := Tópico nombre: 't3' descripción: 't3'.	cuoora conocerUsuarios add: tópico3.	self assert: cuoora conocerUsuarios size equals: 2.	self deny: (cuoora conocerUsuarios includes: tópico3)! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarPregunta	"Elimina unaPregunta de todo CuOOra:		1) Elimina todas las respuestas de unaPregunta y sus votos		2) Elimina todos los votos de unaPregunta		3) Elimina unaPregunta de todos los usuarios		4) Elimina unaPregunta de todos los tópicos"	| usuario tópico pregunta respuesta votoPregunta votoRespuesta |	"Inicialización de usuario, tópico, pregunta y respuesta"	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	tópico := Tópico nombre: 't0' descripción: 't0'.	cuoora agregarUsuario: usuario.	cuoora agregarTópico: tópico.	pregunta := Pregunta		usuario: usuario		título: 'p0'		texto: 'p0'		tópicoRelacionado: tópico.	usuario agregarPregunta: pregunta.	tópico agregarPregunta: pregunta.	respuesta := Respuesta usuario: usuario texto: 'r0' preguntaReferida: pregunta.	usuario agregarRespuesta: respuesta.	pregunta agregarRespuesta: respuesta.	"Inicialización de votos"	votoPregunta := Voto usuario: 'u1' entrada: pregunta.	pregunta agregarVotoNegativo: votoPregunta.	votoRespuesta := Voto usuario: 'u2' entrada: respuesta.	respuesta agregarVotoPositivo: votoRespuesta.	"Tests de inicialización"	self assert: (usuario conocerPreguntas includes: pregunta).	self assert: (tópico conocerPreguntas includes: pregunta).	self assert: (usuario conocerRespuestas includes: respuesta).	self assert: (pregunta conocerRespuestas includes: respuesta).	self assert: (pregunta conocerVotosNegativos includes: votoPregunta).	self assert: (respuesta conocerVotosPositivos includes: votoRespuesta).	"Eliminar pregunta"	cuoora eliminarPregunta: pregunta.	self deny: (respuesta conocerVotosPositivos includes: votoRespuesta).	self deny: (usuario conocerRespuestas includes: respuesta).	self deny: (pregunta conocerRespuestas includes: respuesta).	self deny: (pregunta conocerVotosNegativos includes: votoPregunta).	self deny: (usuario conocerPreguntas includes: pregunta).	self deny: (tópico conocerPreguntas includes: pregunta)! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testConocerTópicoSiExiste	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: (cuoora conocerTópicoSiExiste: 'Reptiles') isNotNil.	self assert: (cuoora conocerTópicoSiExiste: 'Anfibios') isNil! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testAgregarRespuesta	| usuario1 pregunta1 tópico1 unaRespuesta |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123' fechaCreación: DateAndTime now.	tópico1 := Tópico nombre: 'Animales' descripción: 'Animales del mundo'.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Canguro'		texto: '¿Cómo hace un canguro para mantener limpia su bolsa?'		tópicoRelacionado: tópico1.	cuoora agregarPregunta: pregunta1.	unaRespuesta := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	cuoora agregarRespuesta: unaRespuesta.	unaRespuesta usuario agregarRespuesta: unaRespuesta.	unaRespuesta preguntaReferida agregarRespuesta: unaRespuesta.	self assert: (usuario1 conocerRespuestas anySatisfy: [ :aRespuesta | aRespuesta = unaRespuesta ]).	self assert: (pregunta1 conocerRespuestas anySatisfy: [ :aRespuesta | aRespuesta = unaRespuesta ])! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self assert: cuoora conocerTópicos size equals: 0.	self assert: cuoora conocerUsuarios size equals: 0! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testTópicos	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self deny: cuoora conocerTópicos isEmpty! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerUsuarios	| usuario1 usuario2 usuario3 |	"Agregar un usuario"	self assert: cuoora conocerUsuarios isEmpty.	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	cuoora agregarUsuario: usuario1.	self deny: cuoora conocerUsuarios isEmpty.	self assert: cuoora conocerUsuarios size equals: 1.	self assert: (cuoora conocerUsuarios includes: usuario1).	"Agregar otro usuario"	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	cuoora agregarUsuario: usuario2.	self assert: cuoora conocerUsuarios size equals: 2.	self assert: (cuoora conocerUsuarios includes: usuario2).	"try to modify usuarios"	usuario3 := Usuario nombre: 'u3' contraseña: 'u3'.	cuoora conocerUsuarios add: usuario3.	self assert: cuoora conocerUsuarios size equals: 2.	self deny: (cuoora conocerUsuarios includes: usuario3)! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testConocerUsuarioSiExiste	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	usuario2 := Usuario nombre: 'Gonzalo' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: (cuoora conocerUsuarioSiExiste: usuario1) = usuario1.	self assert: (cuoora conocerUsuarioSiExiste: usuario2) isNil! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testAgregarPregunta	| usuario1 pregunta1 tópico1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123' fechaCreación: DateAndTime now.	tópico1 := Tópico nombre: 'Animales' descripción: 'Animales del mundo'.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Canguro'		texto: '¿Cómo hace un canguro para mantener limpia su bolsa?'		tópicoRelacionado: tópico1.	cuoora agregarPregunta: pregunta1.	self assert: (usuario1 conocerPreguntas anySatisfy: [ :aPregunta | aPregunta = pregunta1 ]).	self assert: (tópico1 conocerPreguntas anySatisfy: [ :aPregunta | aPregunta = pregunta1 ])! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testCuooraSingleton	self assert: cuoora cuooraSingleton conocerTópicos size equals: 3.	self assert: cuoora cuooraSingleton conocerUsuarios size equals: 3! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testUsuarios	| usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self deny: cuoora conocerUsuarios isEmpty! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarUsuario	| usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: cuoora conocerUsuarios size equals: 1! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: cuoora conocerTópicos size equals: 1! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testExisteTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: cuoora conocerTópicos size equals: 1.	self deny: (cuoora existeTópico: 't3').	self assert: (cuoora existeTópico: 'Reptiles')! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testGetOrCreateTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: (cuoora getOrCreateTópico: 'Reptiles') equals: tópico1.	self assert: (cuoora getOrCreateTópico: 'Reptiles') nombre equals: 'Reptiles'.	self assert: cuoora conocerTópicos size equals: 1.	self assert: (cuoora getOrCreateTópico: 'Anfibios') isNotNil.	self assert: (cuoora getOrCreateTópico: 'Anfibios') nombre equals: 'Anfibios'.	self assert: cuoora conocerTópicos size equals: 2! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testValidarUsuarioContraseña	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: (cuoora validarUsuarioContraseña: usuario2) = usuario1.	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta12'.	self assert: (cuoora validarUsuarioContraseña: usuario2) isNil! !!CuOOraTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	cuoora := CuOOra new.		! !TestCase subclass: #EntradaTest	instanceVariableNames: 'entrada'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!EntradaTest commentStamp: 'GonzaloUlla 7/1/2019 22:08' prior: 0!Class part:  "Represento un Test Unitario de Entrada".Responsibility part: "Lo que hago:  Permito probar una Entrada"Collaborators Part: "Modelo Entrada"!!EntradaTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	"Una Entrada no debería instanciarse, por ende se prueba una Respuesta (es una Entrada)"	| usuario |	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	entrada := Respuesta		usuario: usuario		texto: 'r0'		preguntaReferida:			(Pregunta				usuario: usuario				título: 'p0'				texto: 'p0'				tópicoRelacionado: (Tópico nombre: 't0' descripción: 't0'))! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testCalcularPuntaje	| voto1 voto2 voto3 voto4 |	self assert: entrada calcularPuntaje equals: 0.	"Crear Voto y Agregarlo"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	voto4 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	self assert: entrada calcularPuntaje equals: 1.	entrada agregarVotoNegativo: voto2.	self assert: entrada calcularPuntaje equals: 0.	entrada agregarVotoNegativo: voto4.	"2 votos negativos, 1 positivo, puntaje = -1"	self assert: entrada calcularPuntaje equals: -1! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarUsuario	self assert: entrada usuario isNotNil.	entrada eliminarUsuario.	self assert: entrada usuario isNil! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerVotosPositivos	| voto1 voto2 voto3 |	"Crear Voto y Agregarlo"	self assert: entrada conocerVotosPositivos size equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	self assert: entrada conocerVotosPositivos size equals: 1.	self assert: (entrada conocerVotosPositivos includes: voto1).	self deny: (entrada conocerVotosPositivos includes: voto2).	self deny: (entrada conocerVotosPositivos includes: voto3).	"try to modify votosPositivos"	entrada conocerVotosPositivos add: 'otro voto'.	self assert: entrada conocerVotosPositivos size equals: 1! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: entrada fechaCreación isNil.	self deny: entrada texto isNil.	self deny: entrada usuario isNil.	self assert: (entrada conocerVotosPositivos isMemberOf: OrderedCollection).	self assert: (entrada conocerVotosNegativos isMemberOf: OrderedCollection).	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerVotosNegativos	| voto1 voto2 voto3 voto4 |	"Crear Voto y Agregarlo"	self assert: entrada conocerVotosNegativos size equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	voto4 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto4.	self assert: entrada conocerVotosNegativos size equals: 2.	self deny: (entrada conocerVotosNegativos includes: voto1).	self assert: (entrada conocerVotosNegativos includes: voto2).	self deny: (entrada conocerVotosNegativos includes: voto3).	self assert: (entrada conocerVotosNegativos includes: voto4).	"try to modify votosNegativos"	entrada conocerVotosNegativos add: 'otro voto'.	self assert: entrada conocerVotosNegativos size equals: 2! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarVotoNegativo	| voto1 voto2 voto3 voto4 |	"Crear Voto y Agregarlo"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	voto4 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto4.	self assert: entrada conocerVotosNegativos size equals: 2.	self deny: (entrada conocerVotosNegativos includes: voto1).	self assert: (entrada conocerVotosNegativos includes: voto2).	self deny: (entrada conocerVotosNegativos includes: voto3).	self assert: (entrada conocerVotosNegativos includes: voto4)! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarTodosVotos	| voto1 voto2 voto3 |	"Pruebas en estado inicial"	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	entrada eliminarTodosVotos.	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	"Crear Votos y Agregarlos"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto3.	self deny: entrada conocerVotosPositivos isEmpty.	self deny: entrada conocerVotosNegativos isEmpty.	self assert: (entrada conocerVotosNegativos includes: voto2).	"Eliminar todos los votos"	entrada eliminarTodosVotos.	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	self deny: (entrada conocerVotosNegativos includes: voto2)! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarVotoPositivo	| voto1 voto2 voto3 |	"Crear Voto y Agregarlo"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	self assert: entrada conocerVotosPositivos size equals: 1.	self assert: (entrada conocerVotosPositivos includes: voto1).	self deny: (entrada conocerVotosPositivos includes: voto2).	self deny: (entrada conocerVotosPositivos includes: voto3)! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PreguntaTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de Pregunta".Responsibility part: "Lo que hago:  Permito probar una Pregunta"Collaborators Part: "Modelo Pregunta"!!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópicoRelacionado	| tópico2 |	"Iniciliazo tópico2"	tópico2 := Tópico		nombre: 'Color'		descripción: 'Color de objetos, animales'.	"Agrego tópico2 a los tópicos de la pregunta"	pregunta agregarTópicoRelacionado: tópico2.	"Valido que la pregunta tiene dos tópicos"	self		assert: pregunta conocerTópicosRelacionados size		equals: 2! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarRespuesta	| usuario1 respuesta1 |	"Inicializo usuario1 y respuesta1"	usuario1 := Usuario		nombre: 'Gonzalo'		contraseña: 'Gonzalo123'.	respuesta1 := Respuesta		usuario: usuario1		texto: 'r1'		preguntaReferida: pregunta.	"Agrego respuesta1 a pregunta"	pregunta agregarRespuesta: respuesta1.	"Valido que la colección de respuestas de pregunta no esté vacía, dado que acabamos de agregarle una respuesta"	self deny: pregunta conocerRespuestas isEmpty! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testCalcularPuntajePromedioRespuestas	| respuesta1 respuesta2 respuesta3 usuario1 usuario2 usuario3 voto1 voto2 voto3 voto4 voto5 |	"Inicializo usuario1, usuario2 y usuario3"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	usuario2 := Usuario nombre: 'Pedro' contraseña: 'Pedro123'.	usuario3 := Usuario nombre: 'Ana' contraseña: 'Ana123'.		"Inicializo respuesta1, respuesta2 y respuesta3"	respuesta1 := Respuesta		usuario: usuario1		texto: 'r1'		preguntaReferida: pregunta.	respuesta2 := Respuesta		usuario: usuario2		texto: 'r2'		preguntaReferida: pregunta.	respuesta3 := Respuesta		usuario: usuario3		texto: 'r3'		preguntaReferida: pregunta.			"Agrego respuesta1, respuesta2 y respuesta3 a pregunta"		pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.	pregunta agregarRespuesta: respuesta3.		"Valido que la pregunta posea tres respuestas"	self assert: pregunta conocerRespuestas size equals: 3.		"Valido que el puntaje promedio de las respuestas sea 0, dado que todavía no poseen votos"	self		assert: pregunta calcularPuntajePromedioRespuestas		equals: 0.			"Inicializo voto1, voto2, voto3, voto4 y voto5"		voto1 := Voto usuario: usuario2 entrada: respuesta1.	voto2 := Voto usuario: usuario3 entrada: respuesta1.	voto3 := Voto usuario: usuario1 entrada: respuesta2.	voto4 := Voto usuario: usuario1 entrada: respuesta3.	voto5 := Voto usuario: usuario2 entrada: respuesta3.		"respuesta1 posee 2 puntos a favor, respuesta2 posee 1 punto a favor y respuesta3 posee 0 puntos a favor"	respuesta1 agregarVotoPositivo: voto1.	respuesta1 agregarVotoPositivo: voto2.	respuesta2 agregarVotoPositivo: voto3.	respuesta3 agregarVotoPositivo: voto4.	respuesta3 agregarVotoNegativo: voto5.		"Valido que el puntaje promedio de respuestas sea 1, dado que 3/3 = 1"	self		assert: pregunta calcularPuntajePromedioRespuestas		equals: 1.				! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicosRelacionados	|tópico1|	self deny: pregunta conocerTópicosRelacionados isEmpty.		tópico1 := Tópico nombre: 'Color' descripción: 'Color objetos, animales'.	pregunta agregarTópicoRelacionado: tópico1.		self assert: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Reptiles' ]).	self assert: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Color' ]).	self deny: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Naturaleza' ]).		! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerRespuestas	|respuesta1 respuesta2 usuario1 usuario2 voto1 voto2|		usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	usuario2 := Usuario nombre: 'Pedro' contraseña: 'Pedro123'. 	 	respuesta1 := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta.	respuesta2 := Respuesta usuario: usuario2 texto: 'r2' preguntaReferida: pregunta.		pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.		self assert: pregunta conocerRespuestas size equals: 2.	self assert: pregunta calcularPuntajePromedioRespuestas equals: 0.	 		voto1 := Voto usuario: usuario1 entrada: respuesta2.	voto2 := Voto usuario: usuario2 entrada: respuesta1.	respuesta2 agregarVotoPositivo: voto1.	respuesta1 agregarVotoNegativo: voto2.		self assert: (pregunta conocerRespuestas first = respuesta2).! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarTodasRespuestas	|usuario1 respuesta1 respuesta2 voto1|		"Inicializo usuario1 y respuesta1"	usuario1 := Usuario 		nombre: 'Gonzalo' 		contraseña: 'Gonzalo123'.		respuesta1 := Respuesta 		usuario: usuario1  		texto: 'r1'  		preguntaReferida: pregunta.   	respuesta2 := Respuesta 		usuario: usuario1  		texto: 'r2'  		preguntaReferida: pregunta.			"Agrego respuesta1 y respuesta2 a pregunta"	pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.		"Inicializo el voto1"	voto1 := Voto 		usuario: usuario1 		entrada: respuesta1.		"Agrego voto1 positivo en respuesta1"		respuesta1 agregarVotoPositivo: voto1. 		"Valido que la respuesta1 tiene un voto positivo"	self assert: respuesta1 conocerVotosPositivos size equals: 1.		"Valido que la pregunta posea dos respuestas"	self assert: pregunta conocerRespuestas size equals: 2.		"Elimino todas las respuestas de la pregunta"	pregunta eliminarTodasRespuestas.		"Valido que la pregunta no posee dos respuestas"	self deny: pregunta conocerRespuestas size = 2.		"Valido que la pregunta no posee respuestas"	self assert: pregunta conocerRespuestas isEmpty.		"Valido que la respuesta no posee votos positivos"	self assert: respuesta1 conocerVotosPositivos isEmpty. 	! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: pregunta conocerTópicosRelacionados size = 0.	! !!PreguntaTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	|usuario1 tópico1|	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta usuario: usuario1 fechaCreación: (DateAndTime now) título: 'Color Serpiente' texto: '¿De qué color es la serpiente?' tópicoRelacionado: tópico1.	 ! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'respuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!RespuestaTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de Respuesta".Responsibility part: "Lo que hago:  Permito probar una Respuesta"Collaborators Part: "Modelo Respuesta"!!RespuestaTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	| usuario |	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	respuesta := Respuesta		usuario: usuario		texto: 'r0'		preguntaReferida:			(Pregunta				usuario: usuario				título: 'p0'				texto: 'p0'				tópicoRelacionado: (Tópico nombre: 't0' descripción: 't0'))! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testComparing	| otraRespuesta otroUsuario voto1 voto2 voto3 |	otroUsuario := Usuario nombre: 'u1' contraseña: 'u1'.	otraRespuesta := Respuesta		usuario: otroUsuario		texto: 'r1'		preguntaReferida:			(Pregunta				usuario: otroUsuario				título: 'p1'				texto: 'p1'				tópicoRelacionado: (Tópico nombre: 't1' descripción: 't1')).	"0 votos cada respuesta"	self assert: otraRespuesta = respuesta.	self assert: otraRespuesta <= respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta > respuesta.	"0 respuesta, +1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: otraRespuesta.	otraRespuesta agregarVotoPositivo: voto1.	self assert: otraRespuesta > respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta <= respuesta.	self deny: otraRespuesta < respuesta.	otraRespuesta eliminarTodosVotos.	"+1 respuesta, 0 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	respuesta agregarVotoPositivo: voto1.	self assert: otraRespuesta < respuesta.	self assert: otraRespuesta <= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta >= respuesta.	self deny: otraRespuesta > respuesta.	respuesta eliminarTodosVotos.	"-1 respuesta, -1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	voto2 := Voto usuario: otroUsuario entrada: otraRespuesta.	respuesta agregarVotoNegativo: voto1.	otraRespuesta agregarVotoNegativo: voto2.	self assert: otraRespuesta = respuesta.	self assert: otraRespuesta <= respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta > respuesta.	respuesta eliminarTodosVotos.	otraRespuesta eliminarTodosVotos.	"-2 respuesta, -1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	voto2 := Voto usuario: otroUsuario entrada: otraRespuesta.	voto3 := Voto usuario: otroUsuario entrada: respuesta.	respuesta agregarVotoNegativo: voto1.	respuesta agregarVotoNegativo: voto3.	otraRespuesta agregarVotoNegativo: voto2.	self assert: otraRespuesta > respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta <= respuesta! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testDentroDeMejoresRespuestas	"Retorna true/false dependiendo si el puntaje de la Respuesta es mayor o igual al promedio de puntaje de todas las respuestas a esa Pregunta"	"^ self calcularPuntaje >= preguntaReferida calcularPuntajePromedioRespuestas"	| pregunta1 respuesta2 respuesta3 usuario1 usuario2 usuario3 voto1 voto2 voto3 voto4 voto5 |	"Inicializo usuario1, usuario2 y usuario3"	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario3 := Usuario nombre: 'u3' contraseña: 'u3'.	"Inicializo pregunta1"	pregunta1 := Pregunta		usuario: usuario1		título: 'p1'		texto: 'p1'		tópicoRelacionado: 't1'.	"Inicializo respuesta, respuesta2 y respuesta3"	respuesta := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta1.	respuesta2 := Respuesta usuario: usuario2 texto: 'r2' preguntaReferida: pregunta1.	respuesta3 := Respuesta usuario: usuario3 texto: 'r3' preguntaReferida: pregunta1.	"Agrego respuesta, respuesta2 y respuesta3 a pregunta"	pregunta1 agregarRespuesta: respuesta.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	"Valido que la pregunta posea tres respuestas"	self assert: pregunta1 conocerRespuestas size equals: 3.	"Valido que el puntaje promedio de las respuestas sea 0, dado que todavía no poseen votos"	self assert: pregunta1 calcularPuntajePromedioRespuestas equals: 0.	"Inicializo voto1, voto2, voto3, voto4 y voto5"	voto1 := Voto usuario: usuario2 entrada: respuesta.	voto2 := Voto usuario: usuario3 entrada: respuesta.	voto3 := Voto usuario: usuario1 entrada: respuesta2.	voto4 := Voto usuario: usuario1 entrada: respuesta3.	voto5 := Voto usuario: usuario2 entrada: respuesta3.	"respuesta: +2, respuesta2: +1  y respuesta3: 0 "	respuesta agregarVotoPositivo: voto1.	respuesta agregarVotoPositivo: voto2.	respuesta2 agregarVotoPositivo: voto3.	respuesta3 agregarVotoPositivo: voto4.	respuesta3 agregarVotoNegativo: voto5.	"Valido que el puntaje promedio de respuestas sea 1, dado que 3/3 = 1"	self assert: pregunta1 calcularPuntajePromedioRespuestas equals: 1.	"2 > 1"	self assert: respuesta dentroDeMejoresRespuestas.	"1 >= 1"	self assert: respuesta2 dentroDeMejoresRespuestas.	"0 < 1"	self deny: respuesta3 dentroDeMejoresRespuestas! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarUsuario	| usuarioCopy |	self assert: respuesta usuario isNotNil.	self assert: respuesta usuario conocerRespuestas isEmpty.	respuesta usuario agregarRespuesta: respuesta.	usuarioCopy := respuesta usuario.	self assert: respuesta usuario conocerRespuestas isNotEmpty.	self assert: usuarioCopy conocerRespuestas isNotEmpty.	respuesta eliminarUsuario.	self assert: respuesta usuario isNil.	self assert: usuarioCopy conocerRespuestas isEmpty! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: respuesta usuario isNil.	self deny: respuesta fechaCreación isNil.	self assert: respuesta texto isNotNil.	self assert: respuesta preguntaReferida isNotNil! !TestCase subclass: #TópicoTest	instanceVariableNames: 'tópico'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!TópicoTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de Tópico".Responsibility part: "Lo que hago:  Permito probar un Tópico"Collaborators Part: "Modelo Tópico"!!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarPregunta	| pregunta1 pregunta2 pregunta3 usuario |	"initialization"	usuario := Usuario nombre: 'u1' contraseña: 'u1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico.	"eliminada"	pregunta2 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico.	"agregada"	pregunta3 := Pregunta		usuario: (Usuario nombre: 'otro' contraseña: 'otro')		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico.	"nunca agregada"	"add pregunta"	tópico agregarPregunta: pregunta1.	tópico agregarPregunta: pregunta2.	self assert: tópico conocerPreguntas size equals: 2.	self assert: (tópico conocerPreguntas includes: pregunta1).	self assert: (tópico conocerPreguntas includes: pregunta2).	"eliminar pregunta"	tópico eliminarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self deny: (tópico conocerPreguntas includes: pregunta1).	self assert: (tópico conocerPreguntas includes: pregunta2).	self deny: (tópico conocerPreguntas includes: pregunta3).	self should: [ tópico eliminarPregunta: pregunta3 ] raise: Error! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testNombre	self assert: tópico nombre equals: 'Reptiles'! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarPregunta	| pregunta1 usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	pregunta1 := Pregunta		usuario: usuario1		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico.	tópico agregarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self assert: (tópico conocerPreguntas includes: pregunta1)! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: tópico nombre isNil.	self deny: tópico descripción isNil.	self deny: tópico conocerPreguntas isNil.	self assert: (tópico conocerPreguntas isMemberOf: OrderedCollection).	self assert: tópico nombre equals: 'Reptiles'! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerPreguntas	| pregunta1 usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	pregunta1 := Pregunta		usuario: usuario1		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico.	usuario1 agregarPregunta: pregunta1.	tópico agregarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self assert: (tópico conocerPreguntas includes: pregunta1).	"try to modify preguntas"	tópico conocerPreguntas add: 'otra pregunta'.	self assert: tópico conocerPreguntas size equals: 1! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testDescripción	self assert: tópico descripción equals: 'Animales reptiles'! !!TópicoTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	tópico := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!UsuarioTest commentStamp: 'GonzaloUlla 6/30/2019 16:59' prior: 0!Class part:  "Represento un Test Unitario de Usuario".Responsibility part: "Lo que hago:  Permito probar un Usuario"Collaborators Part: "Modelo Usuario"!!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerPreguntasRelevantes	| pregunta1 pregunta2 pregunta3 pregunta4 tópico1 tópico2 usuarioSeguido usuarioNoSeguido |	"initialization - tópicos"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't2' descripción: 't2'.	usuario agregarTópicoInterés: tópico1.	"initialization - usuarios"	usuarioSeguido := Usuario nombre: 'seguido' contraseña: 'seguido'.	usuarioNoSeguido := Usuario nombre: 'no' contraseña: 'no'.	usuario seguirA: usuarioSeguido.	"initialization - preguntas"	pregunta1 := Pregunta		usuario: usuarioSeguido		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"usuarioSeguido, tópico de interés, debe estar 1 vez"	pregunta2 := Pregunta		usuario: usuarioNoSeguido		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico2.	"usuarioNoSeguido, NO tópico de interés, NO debe estar"	pregunta3 := Pregunta		usuario: usuarioNoSeguido		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico1.	"usuarioNoSeguido, tópico de interés, debe estar 1 vez"	pregunta4 := Pregunta		usuario: usuarioSeguido		título: 'p4'		texto: 'p4'		tópicoRelacionado: tópico2.	"usuarioSeguido, NO tópico de interés, debe estar 1 vez"	usuarioSeguido agregarPregunta: pregunta1.	usuarioNoSeguido agregarPregunta: pregunta2.	usuarioNoSeguido agregarPregunta: pregunta3.	usuarioSeguido agregarPregunta: pregunta4.	tópico1 agregarPregunta: pregunta1.	tópico1 agregarPregunta: pregunta3.	tópico2 agregarPregunta: pregunta1.	tópico2 agregarPregunta: pregunta4.	"TEST"	self assert: (usuario conocerPreguntasRelevantes includes: pregunta1).	self deny: (usuario conocerPreguntasRelevantes includes: pregunta2).	self assert: (usuario conocerPreguntasRelevantes includes: pregunta3).	self assert: (usuario conocerPreguntasRelevantes includes: pregunta4).	self assert: usuario conocerPreguntasRelevantes size equals: 3! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testNombre	self assert: usuario nombre equals: 'Julieta'.! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/29/2019 19:14'!testEsSeguidorDe	| otroUsuario |	otroUsuario := Usuario nombre: 'u1' contraseña: 'u2'.	usuario seguirA: otroUsuario.	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: usuario conocerUsuariosSeguidos atRandom nombre = 'u1'.	self deny: usuario conocerUsuariosSeguidos atRandom nombre = 'u2'.	self assert: (usuario esSeguidorDe: otroUsuario).	self deny: (otroUsuario esSeguidorDe: usuario)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópicoInterés	|tópico1|	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'. 	usuario agregarTópicoInterés: tópico1.	self deny: usuario conocerTópicosInterés isEmpty.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicos	| tópico1 tópico2 |	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't1' descripción: 't1'.	usuario agregarTópicoInterés: tópico1.	self assert: usuario conocerTópicosInterés size equals: 1.	self assert: (usuario conocerTópicosInterés includes: tópico1).	self deny: (usuario conocerTópicosInterés includes: tópico2).	"try to modify tópicos"	usuario conocerTópicosInterés add: 'otro'.	self assert: usuario conocerTópicosInterés size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarPregunta	| pregunta1 pregunta2 pregunta3 tópico1 |	"initialization"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"eliminada"	pregunta2 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico1.	"agregada"	pregunta3 := Pregunta		usuario: (Usuario nombre: 'otro' contraseña: 'otro')		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico1.	"nunca agregada"	"add pregunta"	usuario agregarPregunta: pregunta1.	usuario agregarPregunta: pregunta2.	self assert: usuario conocerPreguntas size equals: 2.	self assert: (usuario conocerPreguntas includes: pregunta1).	self assert: (usuario conocerPreguntas includes: pregunta2).	"eliminar pregunta"	usuario eliminarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.	self deny: (usuario conocerPreguntas includes: pregunta1).	self assert: (usuario conocerPreguntas includes: pregunta2).	self deny: (usuario conocerPreguntas includes: pregunta3).	self should: [ usuario eliminarPregunta: pregunta3 ] raise: Error! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarRespuesta	|usuario1 tópico1 pregunta1 respuesta1|	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta1 := Pregunta usuario: usuario1 fechaCreación: (DateAndTime now) título: 'Color serpiente' texto: '¿De qué color son las serpientes?' tópicoRelacionado: tópico1.  	respuesta1 := Respuesta usuario: usuario fechaCreación: (DateAndTime now) texto: 'Son de color verde' preguntaReferida: pregunta1. 	usuario agregarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 1.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerRespuestas	| pregunta1 respuesta1 respuesta2 tópico1 otroUsuario |	"initialization"	otroUsuario := Usuario nombre: 'otro usuario' contraseña: 'asd'.	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: otroUsuario		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"add pregunta"	otroUsuario agregarPregunta: pregunta1.	"respuesta"	respuesta1 := Respuesta usuario: usuario texto: 'r1' preguntaReferida: pregunta1.	"debe estar"	usuario agregarRespuesta: respuesta1.	respuesta2 := Respuesta usuario: otroUsuario texto: 'r2' preguntaReferida: pregunta1.	"NO debe estar"	otroUsuario agregarRespuesta: respuesta2.	self assert: (usuario conocerRespuestas includes: respuesta1).	self assert: usuario conocerRespuestas size equals: 1.	"try to modify respuestas"	usuario conocerRespuestas add: 'otra respuesta'.	self assert: usuario conocerRespuestas size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: usuario nombre isNil.	self deny: usuario contraseña isNil! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerUsuariosSeguidos	| usuario1 usuario2 |	"initialization"	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario seguirA: usuario1.	self assert: (usuario conocerUsuariosSeguidos includes: usuario1).	self deny: (usuario conocerUsuariosSeguidos includes: usuario2).	self assert: usuario conocerUsuariosSeguidos size equals: 1.	"try to modify usuarios"	usuario conocerUsuariosSeguidos add: 'otro usuario'.	self assert: usuario conocerUsuariosSeguidos size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicosInterés	| tópico1 tópico2 |	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't1' descripción: 't1'.	usuario agregarTópicoInterés: tópico1.	self assert: usuario conocerTópicosInterés size equals: 1.	self assert: (usuario conocerTópicosInterés includes: tópico1).	self deny: (usuario conocerTópicosInterés includes: tópico2).	"try to modify tópicos"	usuario conocerTópicosInterés add: 'otro'.	self assert: usuario conocerTópicosInterés size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarPregunta	|pregunta1 tópico1|	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'. 	pregunta1 := Pregunta usuario: usuario fechaCreación: (DateAndTime now) título: 'Color serpiente' texto: '¿De qué color es la serpiente?' tópicoRelacionado: tópico1. 	usuario agregarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerPreguntas	| pregunta1 tópico1 |	"initialization"	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1.	"add pregunta"	usuario agregarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.	"try to modify preguntas"	usuario conocerPreguntas add: 'otra pregunta'.	self assert: usuario conocerPreguntas size equals: 1.	"evaluate usuario"	self assert: usuario conocerPreguntas atRandom título equals: 'Color serpiente'! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/29/2019 23:49'!testDejarDeSeguirA	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario seguirA: usuario1.	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: (usuario esSeguidorDe: usuario1).	self deny: (usuario esSeguidorDe: usuario2).	usuario dejarDeSeguirA: usuario1.	self deny: (usuario esSeguidorDe: usuario1).	usuario dejarDeSeguirA: usuario2.	self deny: (usuario esSeguidorDe: usuario2)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarRespuesta	| pregunta1 respuesta1 tópico1 |	"initialization"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"eliminada"	respuesta1 := Respuesta usuario: usuario texto: 'r1' preguntaReferida: pregunta1.	"add pregunta"	usuario agregarPregunta: pregunta1.	usuario agregarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 1.	self assert: (usuario conocerRespuestas includes: respuesta1).	"eliminar respuesta"	usuario eliminarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 0.	self deny: (usuario conocerRespuestas includes: respuesta1)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testSeguirA	usuario seguirA: (Usuario nombre: 'u1' contraseña: 'u2').	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: usuario conocerUsuariosSeguidos atRandom nombre = 'u1'.	self deny: usuario conocerUsuariosSeguidos atRandom nombre = 'u2'! !!UsuarioTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	usuario := Usuario nombre: 'Julieta' contraseña: 'Julieta123' 			! !TestCase subclass: #VotoTest	instanceVariableNames: 'voto'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!VotoTest commentStamp: 'GonzaloUlla 6/30/2019 21:38' prior: 0!Class part:  "Represento un Test Unitario de Voto".Responsibility part: "Lo que hago:  Permito probar un Voto"Collaborators Part: "Modelo Voto"!!VotoTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	| usuario1 tópico1 pregunta |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta usuario: usuario1 fechaCreación: (DateAndTime now) título: 'Color Serpiente' texto: '¿De qué color es la serpiente?' tópicoRelacionado: tópico1.	voto := Voto usuario: usuario1 entrada: pregunta	 ! !!VotoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: voto usuario isNil.	self deny: voto entrada isNil.	self assert: voto fechaCreación isNotNil! !