TestCase subclass: #ActivaTest	instanceVariableNames: 'pregunta sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!ActivaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCrear	|  usuario2 respuesta1 |	"Inicializo usuario2 y respuesta1"	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	respuesta1 := Respuesta usuario: usuario2 texto: 'r1' preguntaReferida: pregunta.	self assert: pregunta estaActiva.	"La pregunta no tiene respuestas, puede volver a Creada"	pregunta crear.	self assert: pregunta estaCreada.	"Valido que la pregunta no pueda volver al estado Creada dado que ya tiene una respuesta"	pregunta activar.	self assert: pregunta estaActiva.	pregunta agregarRespuesta: respuesta1.	pregunta crear.	self deny: pregunta estaCreada.	self assert: pregunta estaActiva! !!ActivaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testActivar	self assert: pregunta estaActiva.	self deny: pregunta activar.	self assert: pregunta estaActiva! !!ActivaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCerrar	self assert: pregunta estaActiva.	self assert: pregunta cerrar.	self assert: pregunta estaCerrada! !!ActivaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testAgregarRespuesta	|  usuario2 respuesta1 |	"Inicializo usuario2 y respuesta1"	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	respuesta1 := Respuesta usuario: usuario2 texto: 'r1' preguntaReferida: pregunta.	self assert: pregunta estaActiva.	self assert: (pregunta agregarRespuesta: respuesta1).	"Valido que la colección de respuestas no esté vacía, dado que la pregunta está en estado Activa y, en este estado, es posible agregarle respuestas"	self deny: pregunta conocerRespuestas isEmpty! !!ActivaTest methodsFor: 'running' stamp: 'GitHub 4/17/2020 02:02:12'!setUp	| usuario1 tópico1 |	"Inicializo usuario1, tópico1 y pregunta1"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color Serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1.	usuario1 agregarPregunta: pregunta.	tópico1 agregarPregunta: pregunta.	pregunta activar.	sDAO := SluggishDAO newSingleton! !TestCase subclass: #CerradaTest	instanceVariableNames: 'pregunta sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!CerradaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCrear	self assert: pregunta estaCerrada.	self deny: pregunta crear.	self assert: pregunta estaCerrada! !!CerradaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testActivar	self assert: pregunta estaCerrada.	self deny: pregunta activar.	self assert: pregunta estaCerrada! !!CerradaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCerrar	self assert: pregunta estaCerrada.	self deny: pregunta cerrar.	self assert: pregunta estaCerrada! !!CerradaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testAgregarRespuesta	|  usuario2 respuesta1 |	"Inicializo usuario2 y respuesta1"	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	respuesta1 := Respuesta usuario: usuario2 texto: 'r1' preguntaReferida: pregunta.	self deny: (pregunta agregarRespuesta: respuesta1).	"Valido que la colección de respuestas esté vacía, dado que la pregunta está en estado Creada y, en este estado, no es posible agregarle respuestas"	self assert: pregunta conocerRespuestas isEmpty.	self assert: pregunta estaCerrada! !!CerradaTest methodsFor: 'running' stamp: 'GitHub 4/17/2020 02:02:12'!setUp	| usuario1 tópico1 |	"Inicializo usuario1, tópico1 y pregunta1"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color Serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1.	usuario1 agregarPregunta: pregunta.	tópico1 agregarPregunta: pregunta.	pregunta		activar;		cerrar.	sDAO := SluggishDAO newSingleton! !TestCase subclass: #CreadaTest	instanceVariableNames: 'pregunta sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!CreadaTest methodsFor: 'running' stamp: 'GitHub 4/17/2020 02:02:12'!setUp	| usuario1 tópico1 |	"Inicializo usuario1, tópico1 y pregunta1"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color Serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1.	usuario1 agregarPregunta: pregunta.	tópico1 agregarPregunta: pregunta.	sDAO := SluggishDAO newSingleton! !!CreadaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCrear	self assert: pregunta estaCreada.	self deny: pregunta crear.	self assert: pregunta estaCreada! !!CreadaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testActivar	self deny: pregunta estaActiva.	pregunta activar.	self assert: pregunta estaActiva! !!CreadaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCerrar	self assert: pregunta estaCreada.	self deny: pregunta cerrar.	self assert: pregunta estaCreada! !!CreadaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testAgregarRespuesta	| usuario2 respuesta1 |	"Inicializo usuario2 y respuesta1"	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	respuesta1 := Respuesta usuario: usuario2 texto: 'r1' preguntaReferida: pregunta.	self assert: pregunta estaCreada.	self deny: pregunta estaActiva.	self deny: (pregunta agregarRespuesta: respuesta1).	"Valido que la colección de respuestas esté vacía, dado que la pregunta está en estado Creada y, en este estado, no es posible agregarle respuestas"	self assert: pregunta conocerRespuestas isEmpty! !TestCase subclass: #CuOOraTest	instanceVariableNames: 'cuoora'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!CuOOraTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de CuOOra".Responsibility part: "Lo que hago:  Permito probar una CuOOra"Collaborators Part: "Modelo CuOOra"!!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:20'!testAgregarRespuesta	| usuario1 pregunta1 tópico1 unaRespuesta |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123' fechaCreación: DateAndTime now.	tópico1 := Tópico nombre: 'Animales' descripción: 'Animales del mundo'.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Canguro'		texto: '¿Cómo hace un canguro para mantener limpia su bolsa?'		tópicoRelacionado: tópico1.	cuoora agregarPregunta: pregunta1.	unaRespuesta := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	self deny: (cuoora agregarRespuesta: unaRespuesta).	pregunta1 activar.	cuoora agregarRespuesta: unaRespuesta.	self assert: (usuario1 conocerRespuestas anySatisfy: [ :aRespuesta | aRespuesta = unaRespuesta ]).	self assert: (pregunta1 conocerRespuestas anySatisfy: [ :aRespuesta | aRespuesta = unaRespuesta ])! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicos	| tópico1 tópico2 tópico3 |	"Agregar un tópico"	self assert: cuoora conocerTópicos isEmpty.	tópico1 := Tópico nombre: 't1' descripción: 't1'.	cuoora agregarUsuario: tópico1.	self deny: cuoora conocerUsuarios isEmpty.	self assert: cuoora conocerUsuarios size equals: 1.	self assert: (cuoora conocerUsuarios includes: tópico1).	"Agregar otro tópico"	tópico2 := Tópico nombre: 't2' descripción: 't2'.	cuoora agregarUsuario: tópico2.	self assert: cuoora conocerUsuarios size equals: 2.	self assert: (cuoora conocerUsuarios includes: tópico2).	"try to modify tópicos"	tópico3 := Tópico nombre: 't3' descripción: 't3'.	cuoora conocerUsuarios add: tópico3.	self assert: cuoora conocerUsuarios size equals: 2.	self deny: (cuoora conocerUsuarios includes: tópico3)! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testConocerTópicoSiExiste	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: (cuoora conocerTópicoSiExiste: 'Reptiles') isNotNil.	self assert: (cuoora conocerTópicoSiExiste: 'Anfibios') isNil! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testExisteTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: cuoora conocerTópicos size equals: 1.	self deny: (cuoora existeTópico: 't3').	self assert: (cuoora existeTópico: 'Reptiles')! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/14/2020 01:54'!testEliminarPregunta	"Elimina unaPregunta de todo CuOOra:		1) Elimina todas las respuestas de unaPregunta y sus votos		2) Elimina todos los votos de unaPregunta		3) Elimina unaPregunta de todos los usuarios		4) Elimina unaPregunta de todos los tópicos"	| usuario tópico pregunta respuesta votoPregunta votoRespuesta |	"Inicialización de usuario, tópico, pregunta y respuesta"	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	tópico := Tópico nombre: 't0' descripción: 't0'.	cuoora agregarUsuario: usuario.	cuoora agregarTópico: tópico.	pregunta := Pregunta		usuario: usuario		título: 'p0'		texto: 'p0'		tópicoRelacionado: tópico.	usuario agregarPregunta: pregunta.	tópico agregarPregunta: pregunta.	respuesta := Respuesta usuario: usuario texto: 'r0' preguntaReferida: pregunta.	usuario agregarRespuesta: respuesta.	pregunta activar.	pregunta agregarRespuesta: respuesta.	"Inicialización de votos"	votoPregunta := Voto usuario: 'u1' entrada: pregunta.	pregunta agregarVotoNegativo: votoPregunta.	votoRespuesta := Voto usuario: 'u2' entrada: respuesta.	respuesta agregarVotoPositivo: votoRespuesta.	"Tests de inicialización"	self assert: (usuario conocerPreguntas includes: pregunta).	self assert: (tópico conocerPreguntas includes: pregunta).	self assert: (usuario conocerRespuestas includes: respuesta).	self assert: (pregunta conocerRespuestas includes: respuesta).	self assert: (pregunta conocerVotosNegativos includes: votoPregunta).	self assert: (respuesta conocerVotosPositivos includes: votoRespuesta).	"Eliminar pregunta"	cuoora eliminarPregunta: pregunta.	self deny: (respuesta conocerVotosPositivos includes: votoRespuesta).	self deny: (usuario conocerRespuestas includes: respuesta).	self deny: (pregunta conocerRespuestas includes: respuesta).	self deny: (pregunta conocerVotosNegativos includes: votoPregunta).	self deny: (usuario conocerPreguntas includes: pregunta).	self deny: (tópico conocerPreguntas includes: pregunta)! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self assert: cuoora conocerTópicos size equals: 0.	self assert: cuoora conocerUsuarios size equals: 0! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testTópicos	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self deny: cuoora conocerTópicos isEmpty! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerUsuarios	| usuario1 usuario2 usuario3 |	"Agregar un usuario"	self assert: cuoora conocerUsuarios isEmpty.	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	cuoora agregarUsuario: usuario1.	self deny: cuoora conocerUsuarios isEmpty.	self assert: cuoora conocerUsuarios size equals: 1.	self assert: (cuoora conocerUsuarios includes: usuario1).	"Agregar otro usuario"	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	cuoora agregarUsuario: usuario2.	self assert: cuoora conocerUsuarios size equals: 2.	self assert: (cuoora conocerUsuarios includes: usuario2).	"try to modify usuarios"	usuario3 := Usuario nombre: 'u3' contraseña: 'u3'.	cuoora conocerUsuarios add: usuario3.	self assert: cuoora conocerUsuarios size equals: 2.	self deny: (cuoora conocerUsuarios includes: usuario3)! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testConocerUsuarioSiExiste	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	usuario2 := Usuario nombre: 'Gonzalo' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: (cuoora conocerUsuarioSiExiste: usuario1) = usuario1.	self assert: (cuoora conocerUsuarioSiExiste: usuario2) isNil! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testValidarUsuarioContraseña	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: (cuoora validarUsuarioContraseña: usuario2) = usuario1.	usuario2 := Usuario nombre: 'Julieta' contraseña: 'Julieta12'.	self assert: (cuoora validarUsuarioContraseña: usuario2) isNil! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testCuooraSingleton	self assert: cuoora cuooraSingleton conocerTópicos size equals: 3.	self assert: cuoora cuooraSingleton conocerUsuarios size equals: 4! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testUsuarios	| usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self deny: cuoora conocerUsuarios isEmpty! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarUsuario	| usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	cuoora agregarUsuario: usuario1.	self assert: cuoora conocerUsuarios size equals: 1! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: cuoora conocerTópicos size equals: 1! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!testGetOrCreateTópico	| tópico1 |	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	cuoora agregarTópico: tópico1.	self assert: (cuoora getOrCreateTópico: 'Reptiles') equals: tópico1.	self assert: (cuoora getOrCreateTópico: 'Reptiles') nombre equals: 'Reptiles'.	self assert: cuoora conocerTópicos size equals: 1.	self assert: (cuoora getOrCreateTópico: 'Anfibios') isNotNil.	self assert: (cuoora getOrCreateTópico: 'Anfibios') nombre equals: 'Anfibios'.	self assert: cuoora conocerTópicos size equals: 2! !!CuOOraTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerTodasPreguntas	self assert: cuoora cuooraSingleton conocerTodasPreguntas size equals: 4! !!CuOOraTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:20'!testAgregarPregunta	| usuario1 pregunta1 tópico1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123' fechaCreación: DateAndTime now.	tópico1 := Tópico nombre: 'Animales' descripción: 'Animales del mundo'.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Canguro'		texto: '¿Cómo hace un canguro para mantener limpia su bolsa?'		tópicoRelacionado: tópico1.	cuoora agregarPregunta: pregunta1.	self assert: (usuario1 conocerPreguntas anySatisfy: [ :aPregunta | aPregunta = pregunta1 ]).	self assert: (tópico1 conocerPreguntas anySatisfy: [ :aPregunta | aPregunta = pregunta1 ])! !!CuOOraTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	cuoora := CuOOra new.		! !!CuOOraTest methodsFor: 'running' stamp: 'GonzaloUlla 4/16/2020 23:21'!testExportarPreguntasJson	| usuario1 tópico1 pregunta1 respuesta1 |	usuario1 := Usuario new.	tópico1 := Tópico new.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color lagarto'		texto: '¿De qué color es el lagarto?'		tópicoRelacionado: tópico1.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	pregunta1 activar.	pregunta1 agregarRespuesta: respuesta1.	cuoora agregarUsuario: usuario1.	cuoora agregarTópico: tópico1.	usuario1 agregarPregunta: pregunta1.	usuario1 agregarPregunta: pregunta1.	usuario1 agregarRespuesta: respuesta1.	tópico1 agregarPregunta: pregunta1.	self		assert: cuoora exportarPreguntasJson		equals:			'{"preguntas":[{"título":"Color lagarto","texto":"¿De qué color es el lagarto?","respuestas":[{"texto":"Es de color verde"}]},{"título":"Color lagarto","texto":"¿De qué color es el lagarto?","respuestas":[{"texto":"Es de color verde"}]}]}'! !!CuOOraTest methodsFor: 'running' stamp: 'GonzaloUlla 4/16/2020 23:21'!testExportarPreguntasXml	| usuario1 tópico1 pregunta1 respuesta1 |	usuario1 := Usuario new.	tópico1 := Tópico new.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color lagarto'		texto: '¿De qué color es el lagarto?'		tópicoRelacionado: tópico1.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	pregunta1 activar.	pregunta1 agregarRespuesta: respuesta1.	pregunta1 agregarRespuesta: respuesta1.	cuoora agregarUsuario: usuario1.	cuoora agregarTópico: tópico1.	usuario1 agregarPregunta: pregunta1.	usuario1 agregarPregunta: pregunta1.	usuario1 agregarRespuesta: respuesta1.	tópico1 agregarPregunta: pregunta1.	self		assert: cuoora exportarPreguntasXml		equals:			'<?xml version="1.0"?>' , String cr , '<preguntas><pregunta>' , String cr				, '    <título>Color lagarto</título>' , String cr				, '    <texto>¿De qué color es el lagarto?</texto>' , String cr				, '<respuestas><respuesta>' , String cr , '    <texto>Es de color verde</texto>'				, String cr , '</respuesta><respuesta>' , String cr				, '    <texto>Es de color verde</texto>' , String cr , '</respuesta></respuestas>'				, String cr , '</pregunta><pregunta>' , String cr				, '    <título>Color lagarto</título>' , String cr				, '    <texto>¿De qué color es el lagarto?</texto>' , String cr				, '<respuestas><respuesta>' , String cr , '    <texto>Es de color verde</texto>'				, String cr , '</respuesta><respuesta>' , String cr				, '    <texto>Es de color verde</texto>' , String cr , '</respuesta></respuestas>'				, String cr , '</pregunta></preguntas>'! !TestCase subclass: #EntradaTest	instanceVariableNames: 'entrada'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!EntradaTest commentStamp: 'GonzaloUlla 7/1/2019 22:08' prior: 0!Class part:  "Represento un Test Unitario de Entrada".Responsibility part: "Lo que hago:  Permito probar una Entrada"Collaborators Part: "Modelo Entrada"!!EntradaTest methodsFor: 'running' stamp: 'GonzaloUlla 4/16/2020 23:21'!setUp	"Una Entrada no debería instanciarse, por ende se prueba una Respuesta (es una Entrada)"	| usuario |	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	entrada := Respuesta		usuario: usuario		texto: 'r0'		preguntaReferida:			(Pregunta				usuario: usuario				título: 'p0'				texto: 'p0'				tópicoRelacionado: (Tópico nombre: 't0' descripción: 't0'))! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testAgregarVotoNegativo	| voto1 voto2 voto3 voto4 |	"Crear Voto y Agregarlo"	self assert: entrada conocerVotosNegativos size equals: 0.	self assert: entrada votosNegativosSize equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	voto4 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto4.	self assert: entrada conocerVotosNegativos size equals: 2.	self assert: entrada votosNegativosSize equals: 2.	self deny: (entrada conocerVotosNegativos includes: voto1).	self assert: (entrada conocerVotosNegativos includes: voto2).	self deny: (entrada conocerVotosNegativos includes: voto3).	self assert: (entrada conocerVotosNegativos includes: voto4)! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testAgregarVotoPositivo	| voto1 voto2 voto3 |	"Crear Voto y Agregarlo"	self assert: entrada votosPositivosSize equals: 0.	self assert: entrada conocerVotosPositivos size equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	self assert: entrada votosPositivosSize equals: 1.	self assert: entrada conocerVotosPositivos size equals: 1.	self assert: (entrada conocerVotosPositivos includes: voto1).	self deny: (entrada conocerVotosPositivos includes: voto2).	self deny: (entrada conocerVotosPositivos includes: voto3)! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerVotosPositivos	| voto1 voto2 voto3 |	"Crear Voto y Agregarlo"	self assert: entrada conocerVotosPositivos size equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	self assert: entrada conocerVotosPositivos size equals: 1.	self assert: (entrada conocerVotosPositivos includes: voto1).	self deny: (entrada conocerVotosPositivos includes: voto2).	self deny: (entrada conocerVotosPositivos includes: voto3).	"try to modify votosPositivos"	entrada conocerVotosPositivos add: 'otro voto'.	self assert: entrada conocerVotosPositivos size equals: 1! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testCalcularPuntaje	| voto1 voto2 voto3 |	self assert: entrada calcularPuntaje equals: 0.	"Crear Voto y Agregarlo"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	entrada agregarVotoPositivo: voto1.	self assert: entrada calcularPuntaje equals: 1.	entrada agregarVotoNegativo: voto2.	self assert: entrada calcularPuntaje equals: 0.	entrada agregarVotoNegativo: voto3.	"2 votos negativos, 1 positivo, puntaje = -1"	self assert: entrada calcularPuntaje equals: -1! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerVotosNegativos	| voto1 voto2 voto3 voto4 |	"Crear Voto y Agregarlo"	self assert: entrada conocerVotosNegativos size equals: 0.	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario3' entrada: 'otraEntrada3'.	voto4 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto4.	self assert: entrada conocerVotosNegativos size equals: 2.	self deny: (entrada conocerVotosNegativos includes: voto1).	self assert: (entrada conocerVotosNegativos includes: voto2).	self deny: (entrada conocerVotosNegativos includes: voto3).	self assert: (entrada conocerVotosNegativos includes: voto4).	"try to modify votosNegativos"	entrada conocerVotosNegativos add: 'otro voto'.	self assert: entrada conocerVotosNegativos size equals: 2! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarTodosVotos	| voto1 voto2 voto3 |	"Pruebas en estado inicial"	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	entrada eliminarTodosVotos.	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	"Crear Votos y Agregarlos"	voto1 := Voto usuario: entrada usuario entrada: entrada.	voto2 := Voto usuario: 'otroUsuario' entrada: 'otraEntrada'.	voto3 := Voto usuario: 'otroUsuario4' entrada: 'otraEntrada4'.	entrada agregarVotoPositivo: voto1.	entrada agregarVotoNegativo: voto2.	entrada agregarVotoNegativo: voto3.	self deny: entrada conocerVotosPositivos isEmpty.	self deny: entrada conocerVotosNegativos isEmpty.	self assert: (entrada conocerVotosNegativos includes: voto2).	"Eliminar todos los votos"	entrada eliminarTodosVotos.	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty.	self deny: (entrada conocerVotosNegativos includes: voto2)! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: entrada fechaCreación isNil.	self deny: entrada texto isNil.	self deny: entrada usuario isNil.	self assert: (entrada conocerVotosPositivos isMemberOf: OrderedCollection).	self assert: (entrada conocerVotosNegativos isMemberOf: OrderedCollection).	self assert: entrada conocerVotosPositivos isEmpty.	self assert: entrada conocerVotosNegativos isEmpty! !!EntradaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarUsuario	self assert: entrada usuario isNotNil.	entrada eliminarUsuario.	self assert: entrada usuario isNil! !TestCase subclass: #JsonVisitorTest	instanceVariableNames: 'visitor'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!JsonVisitorTest commentStamp: 'Julieta 4/12/2020 21:39' prior: 0!Class part:  "Represento un Test Unitario de JsonVisitor".Responsibility part: "Lo que hago:  Permito probar un Visitante Json"Collaborators Part: "Modelo JsonVisitor"!!JsonVisitorTest methodsFor: 'running' stamp: 'julirios 4/13/2020 01:10:37'!setUp	visitor := JsonVisitor new! !!JsonVisitorTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:21'!testVisitPregunta	| usuario1 tópico1 pregunta1 respuesta1 |	usuario1 := Usuario new.	tópico1 := Tópico new.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color lagarto'		texto: '¿De qué color es el lagarto?'		tópicoRelacionado: tópico1.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	pregunta1 activar.	self		assert: (pregunta1 accept: visitor)		equals: '{"título":"Color lagarto","texto":"¿De qué color es el lagarto?","respuestas":[]}'.	pregunta1 agregarRespuesta: respuesta1.	self		assert: (pregunta1 accept: visitor)		equals:			'{"título":"Color lagarto","texto":"¿De qué color es el lagarto?","respuestas":[{"texto":"Es de color verde"}]}'! !!JsonVisitorTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:21'!testVisitRespuesta	| usuario1 pregunta1 respuesta1 |	usuario1 := Usuario new.	pregunta1 := Pregunta new.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	self assert: (visitor visitRespuesta: Respuesta new) equals: '{}'.	self		assert: (visitor visitRespuesta: respuesta1)		equals: '{"texto":"Es de color verde"}'! !TestCase subclass: #PersonalizarPorMásRelevantesTest	instanceVariableNames: 'cuoora estrategia sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PersonalizarPorMásRelevantesTest methodsFor: 'running' stamp: 'GitHub 4/14/2020 01:04:13'!setUp	sDAO := SluggishDAO newSingleton.	cuoora := CuOOra new.	estrategia := PersonalizarPorMásRelevantes new! !!PersonalizarPorMásRelevantesTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerPreguntasDelDía	self assert: (estrategia conocerTodasPreguntas: cuoora cuooraSingleton) size equals: 4.	self assert: (estrategia conocerPreguntasDelDía: cuoora cuooraSingleton) size equals: 2! !!PersonalizarPorMásRelevantesTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerTodasPreguntas	self assert: (estrategia conocerTodasPreguntas: cuoora cuooraSingleton) size equals: 4! !!PersonalizarPorMásRelevantesTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testPersonalizarHome	| usuario4 |	usuario4 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com').	"Usuario 4"	usuario4 setHomeMásRelevantes.	self assert: (usuario4 personalizarHome: cuoora cuooraSingleton) size equals: 2.	self		assert: (usuario4 personalizarHome: cuoora cuooraSingleton) first conocerRespuestas isNotEmpty.	self		assert: (usuario4 personalizarHome: cuoora cuooraSingleton) last conocerRespuestas isEmpty! !TestCase subclass: #PersonalizarPorSocialTest	instanceVariableNames: 'cuoora estrategia sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PersonalizarPorSocialTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testPersonalizarHome	| usuario1 usuario3 usuario4 pregunta2 voto1 voto2 voto3 |	usuario4 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com').	"Usuario 4"	self assert: (usuario4 personalizarHome: cuoora cuooraSingleton) isEmpty.	"Usuario 4 no sigue a nadie"	usuario1 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'pedro@cuoora.com' contraseña: 'pedro@cuoora.com').	"Usuario 1"	self assert: (usuario1 personalizarHome: cuoora cuooraSingleton) size equals: 1.	"Usuario 1 sigue a Usuario 3 con 1 pregunta de esta semana y 1 pregunta del pasado"	usuario3 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com').	"Usuario 3"	self assert: (usuario3 personalizarHome: cuoora cuooraSingleton) size equals: 2.	self		assert: (usuario3 personalizarHome: cuoora cuooraSingleton) first usuario nombre		equals: 'pedro@cuoora.com'.	self		assert: (usuario3 personalizarHome: cuoora cuooraSingleton) first calcularPuntaje		equals: 1.	"Registrar Like a pregunta2"	"voto1 por usuario1 a pregunta2"	pregunta2 := (usuario3 personalizarHome: cuoora cuooraSingleton) last.	voto1 := Voto		usuario: (Usuario nombre: 'pedro@cuoora.com' contraseña: 'pedro@cuoora.com')		entrada: pregunta2		fechaCreación: DateAndTime now.	pregunta2 agregarVotoPositivo: voto1.	"voto2 por usuario3 a pregunta2"	voto2 := Voto		usuario: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com')		entrada: pregunta2		fechaCreación: DateAndTime now.	pregunta2 agregarVotoPositivo: voto2.	"voto3 por usuario4 a pregunta2"	voto3 := Voto		usuario: (Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com')		entrada: pregunta2		fechaCreación: DateAndTime now.	pregunta2 agregarVotoPositivo: voto3.	self assert: pregunta2 calcularPuntaje equals: 2.	"El orden deberia cambiar"	self		assert: (usuario3 personalizarHome: cuoora cuooraSingleton) first usuario nombre		equals: 'diego@cuoora.com'! !!PersonalizarPorSocialTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerPreguntasDeUsuariosSeguidosPor	self assert: estrategia usuario isNil.	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com')).	"Usuario 4"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPor: estrategia usuario) isEmpty.	"Usuario 4 no sigue a nadie"	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'diego@cuoora.com' contraseña: 'diego@cuoora.com')).	"Usuario 2"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPor: estrategia usuario) isEmpty.	"Usuario 2 sigue a Usuario 4 que no tiene preguntas"	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com')).	"Usuario 3"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPor: estrategia usuario) isNotEmpty	"Usuario 3 sigue a Usuario 1 y a Usuario 2 con preguntas"! !!PersonalizarPorSocialTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerPreguntasDeUsuariosSeguidosPorSemanaPor	self assert: estrategia usuario isNil.	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com')).	"Usuario 4"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPor: estrategia usuario) isEmpty.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPorSemanaPor: estrategia usuario) isEmpty.	"Usuario 4 no sigue a nadie"	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'pedro@cuoora.com' contraseña: 'pedro@cuoora.com')).	"Usuario 1"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPor: estrategia usuario) isNotEmpty.	self assert: (estrategia conocerPreguntasDeUsuariosSeguidosPorSemanaPor: estrategia usuario) size equals: 1	"Usuario 1 sigue a Usuario 3 con 1 pregunta de esta semana y 1 pregunta del pasado"! !!PersonalizarPorSocialTest methodsFor: 'running' stamp: 'GitHub 4/14/2020 01:04:13'!setUp	sDAO := SluggishDAO newSingleton.	cuoora := CuOOra new.	estrategia := PersonalizarPorSocial new! !TestCase subclass: #PersonalizarPorTópicosTest	instanceVariableNames: 'cuoora estrategia sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PersonalizarPorTópicosTest methodsFor: 'running' stamp: 'GitHub 4/14/2020 01:04:13'!setUp	sDAO := SluggishDAO newSingleton.	cuoora := CuOOra new.	estrategia := PersonalizarPorTópicos new! !!PersonalizarPorTópicosTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerPreguntasPorTópicosInterésDe	"3- Usuario1: [T1, T2, T3], Usuario2: [T1, T2, T3], Usuario3: [], Usuario4: [T2]"	self assert: estrategia usuario isNil.	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com')).	"Usuario 3"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasPorTópicosInterésDe: estrategia usuario) isEmpty.	"Usuario 3 no tiene tópicos de interés"	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'diego@cuoora.com' contraseña: 'diego@cuoora.com')).	"Usuario 2"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasPorTópicosInterésDe: estrategia usuario) size equals: 4	"Usuario 2 tiene T1, T2 y T3 como tópicos de interés"! !!PersonalizarPorTópicosTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testPersonalizarHome	"3- Usuario1: [T1, T2, T3], Usuario2: [T1, T2, T3], Usuario3: [], Usuario4: [T2]"	| usuario2 usuario3 |	usuario3 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com').	"Usuario 3"	usuario3 setHomeTópicos.	self assert: (usuario3 personalizarHome: cuoora cuooraSingleton) isEmpty.	"Usuario 3 no tiene tópicos de interés"	usuario2 := cuoora cuooraSingleton		conocerUsuarioSiExiste: (Usuario nombre: 'diego@cuoora.com' contraseña: 'diego@cuoora.com').	"Usuario 2"	usuario2 setHomeTópicos.	self assert: (usuario2 personalizarHome: cuoora cuooraSingleton) size equals: 3.	"pregunta3 es del 2019, no de la última semana"	self		assert: (usuario2 personalizarHome: cuoora cuooraSingleton) first fechaCreación		equals: DateAndTime yesterday noon.	self		assert: (usuario2 personalizarHome: cuoora cuooraSingleton) last fechaCreación		equals: DateAndTime now noon	"Usuario 2 tiene T1, T2 y T3 como tópicos de interés"! !!PersonalizarPorTópicosTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerPreguntasPorTópicosInterésPorSemanaDe	"3- Usuario1: [T1, T2, T3], Usuario2: [T1, T2, T3], Usuario3: [], Usuario4: [T2]"	self assert: estrategia usuario isNil.	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com')).	"Usuario 3"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasPorTópicosInterésPorSemanaDe: estrategia usuario) isEmpty.	"Usuario 3 no tiene tópicos de interés"	estrategia usuario: (cuoora cuooraSingleton conocerUsuarioSiExiste: (Usuario nombre: 'diego@cuoora.com' contraseña: 'diego@cuoora.com')).	"Usuario 2"	self assert: estrategia usuario isNotNil.	self assert: (estrategia conocerPreguntasPorTópicosInterésPorSemanaDe: estrategia usuario) size equals: 3	"pregunta3 es del 2019, no de la última semana"	"Usuario 2 tiene T1, T2 y T3 como tópicos de interés"! !TestCase subclass: #PreguntaProxyTest	instanceVariableNames: 'cuooraSingleton sDAO proxy'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PreguntaProxyTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cuooraSingleton:		<Object>	preguntaProxy:		<Object>    Implementation Points!!PreguntaProxyTest methodsFor: 'creating' stamp: 'julirios 4/15/2020 00:11:16'!crearRespuestaA: unaPregunta haceSemanas: nWeeks	| fecha |	fecha := DateAndTime today - 1 day.	^ Respuesta		usuario: (Usuario nombre: 'ejemplo@ejemplo.com' contraseña: 'ejemplo@ejemplo.com')		fechaCreación: fecha - nWeeks weeks		texto: 'Texto de ejemplo'		preguntaReferida: unaPregunta! !!PreguntaProxyTest methodsFor: 'creating' stamp: 'julirios 4/15/2020 00:11:16'!crearVotoNegativoA: unaPregunta haceSemanas: nWeeks	| fecha |	fecha := DateAndTime today - 1 day.	^ Voto		usuario: (Usuario nombre: 'ejemplo@ejemplo.com' contraseña: 'ejemplo@ejemplo.com')		entrada: unaPregunta		fechaCreación: fecha - nWeeks weeks		esPositivo: false! !!PreguntaProxyTest methodsFor: 'creating' stamp: 'julirios 4/15/2020 00:11:16'!crearVotoPositivoA: unaPregunta haceSemanas: nWeeks	| fecha |	fecha := DateAndTime today - 1 day.	^ Voto		usuario: (Usuario nombre: 'ejemplo@ejemplo.com' contraseña: 'ejemplo@ejemplo.com')		entrada: unaPregunta		fechaCreación: fecha - nWeeks weeks		esPositivo: true! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerVotosNegativos	| voto |	"LA EJECUCIÓN DE ESTE UT DEMORA 12 SEGUNDOS APROX."	"self assert: (sDAO retrieveAllByClass: pregunta class) size equals: 5."	"TC-01: Inicialización"	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	"TC-02 Pregunta sin VotosNegativos"	self assert: proxy conocerVotosNegativos isEmpty.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy votosNegativosSize equals: 0.	"TC-03 Agregar una VotoNegativo haceSemanas: 0 y repetir consulta - 1 VotoNegativo"	proxy activar.	voto := self crearVotoNegativoA: proxy haceSemanas: 0.	proxy agregarVotoNegativo: voto.	self assert: proxy votosNegativosSize equals: 1.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy conocerVotosNegativos size equals: 1.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy conocerVotosNegativos size equals: 1.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	"TC-04 Agregar 6 VotosNegativos haceSemanas: 0 y repetir consulta - 7 VotosNegativos"	0 to: 5 do: [ :x | 		voto := self crearVotoNegativoA: proxy haceSemanas: 0.		proxy agregarVotoNegativo: voto ].	self assert: proxy votosNegativosSize equals: 7.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	"TC-05 Agregar 1 VotoNegativo haceSemanas: 1 y repetir consulta  - 8 VotosNegativos: (7, 1)"	voto := self crearVotoNegativoA: proxy haceSemanas: 1.	proxy agregarVotoNegativo: voto.	self assert: proxy votosNegativosSize equals: 8.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 2.	self assert: proxy votosNegativosSelectionSize equals: 7.	self assert: proxy conocerVotosNegativos size equals: 1.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 2.	self assert: proxy votosNegativosSelectionSize equals: 7.	"TC-06 Agregar 1 VotoNegativo haceSemanas: 2 y repetir consulta  - 9 VotosNegativos: (7, 1, 1)"	voto := self crearVotoNegativoA: proxy haceSemanas: 2.	proxy agregarVotoNegativo: voto.	self assert: proxy votosNegativosSize equals: 9.	self assert: proxy votosNegativosWeeks equals: 2.	self assert: proxy votosNegativosSelectionSize equals: 7.	self assert: proxy conocerVotosNegativos size equals: 2.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 2.	self assert: proxy votosNegativosSelectionSize equals: 7.	"TC-07 Ultimo TC: Agregar 4 VotosNegativos haceSemanas: 3, 7 VotosNegativos haceSemanas: 5 y repetir consulta  - 20 VotosNegativos: (7, 1, 1, 4, 0, 7)"	0 to: 3 do: [ :x | 		voto := self crearVotoNegativoA: proxy haceSemanas: 3.		proxy agregarVotoNegativo: voto ].	0 to: 6 do: [ :x | 		voto := self crearVotoNegativoA: proxy haceSemanas: 5.		proxy agregarVotoNegativo: voto ].	self assert: proxy votosNegativosSize equals: 20.	self assert: proxy conocerVotosNegativos size equals: 6.	self assert: proxy votosNegativosWeeks equals: 5.	self assert: proxy votosNegativosSelectionSize equals: 13.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 1.	self assert: proxy votosNegativosSelectionSize equals: 0.	self assert: proxy conocerVotosNegativos size equals: 7.	self assert: proxy votosNegativosWeeks equals: 2.	self assert: proxy votosNegativosSelectionSize equals: 7! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testSelectVotosNegativosHaceSemanas	| voto |	self assert: (proxy selectVotosNegativosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosNegativosHaceSemanas: 1) isEmpty.	self assert: (proxy selectVotosNegativosHaceSemanas: 999) isEmpty.	proxy activar.	voto := self crearVotoNegativoA: proxy haceSemanas: 0.	proxy agregarVotoNegativo: voto.	self assert: (proxy selectVotosNegativosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosNegativosHaceSemanas: 1) size equals: 1.	self assert: (proxy selectVotosNegativosHaceSemanas: 1.0) size equals: 1.	self assert: (proxy selectVotosNegativosHaceSemanas: 2) isEmpty.	voto := self crearVotoNegativoA: proxy haceSemanas: 1.	proxy agregarVotoNegativo: voto.	self assert: (proxy selectVotosNegativosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosNegativosHaceSemanas: 1) size equals: 1.	self assert: (proxy selectVotosNegativosHaceSemanas: 2) size equals: 1.	voto := self crearVotoNegativoA: proxy haceSemanas: 0.	proxy agregarVotoNegativo: voto.	voto := self crearVotoNegativoA: proxy haceSemanas: 0.	proxy agregarVotoNegativo: voto.	self assert: (proxy selectVotosNegativosHaceSemanas: 1) size equals: 3! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerRespuestasRealista	| rta |	self assert: proxy conocerRespuestas size equals: 2.	proxy activar.	"Agrego 50 respuestas a razón de 10 por semana"	0 to: 9 do: [ :i | 		0 to: 4 do: [ :j | 			rta := self crearRespuestaA: proxy haceSemanas: j.			proxy agregarRespuesta: rta ] ].	self assert: proxy respuestasSize equals: 52.	"Traer todas las respuestas demoraría 200ms * 50 = 10 segundos"	"Una ejecución del conocerRespuesta demora sin embargo 200ms * 10 = 2 segundos"	"...y va iterando en ciclo cerrado por las 50 respuestas..."	self assert: proxy conocerRespuestas size equals: 12! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testHash	| otroProxy |	otroProxy := proxy copy.	self assert: proxy hash = otroProxy hash.	otroProxy título: 'Otro texto diferente al anterior'.	self deny: (proxy hash = otroProxy hash)! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testCalcularPuntajePromedioRespuestas	| proxy2 respuesta1 respuesta2 respuesta3 respuesta4 usuario1 usuario2 usuario3 voto1 voto2 voto3 voto4 voto5 voto6 voto7 |	proxy2 := proxy copy.	proxy2 texto: 'Otro texto muy diferente'.	"Inicializo usuario1, usuario2 y usuario3"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	usuario2 := Usuario nombre: 'Pedro' contraseña: 'Pedro123'.	usuario3 := Usuario nombre: 'Ana' contraseña: 'Ana123'.	"Inicializo respuesta1, respuesta2 y respuesta3"	respuesta1 := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: proxy.	respuesta2 := Respuesta usuario: usuario2 texto: 'r2' preguntaReferida: proxy.	respuesta3 := Respuesta usuario: usuario3 texto: 'r3' preguntaReferida: proxy.	respuesta4 := Respuesta usuario: usuario3 texto: 'r3' preguntaReferida: proxy2.	sDAO put: respuesta4.	proxy activar.	"Agrego respuesta1, respuesta2 y respuesta3 a pregunta"	proxy agregarRespuesta: respuesta1.	proxy agregarRespuesta: respuesta2.	proxy agregarRespuesta: respuesta3.	"Valido que la pregunta posea tres respuestas"	self assert: proxy conocerRespuestas size equals: 6.	"Valido que el puntaje promedio de las respuestas sea 0, dado que todavía no poseen votos"	self assert: proxy calcularPuntajePromedioRespuestas equals: 0.	"Inicializo voto1, voto2, voto3, voto4 y voto5"	voto1 := Voto usuario: usuario2 entrada: respuesta1.	voto2 := Voto usuario: usuario3 entrada: respuesta1.	voto3 := Voto usuario: usuario1 entrada: respuesta2.	voto4 := Voto usuario: usuario1 entrada: respuesta3.	voto5 := Voto usuario: usuario2 entrada: respuesta3.	voto6 := Voto usuario: usuario2 entrada: respuesta4.	voto7 := Voto usuario: usuario2 entrada: respuesta4.	"respuesta1 posee 2 puntos a favor, respuesta2 posee 1 punto a favor y respuesta3 posee 0 puntos a favor"	respuesta1 agregarVotoPositivo: voto1.	respuesta1 agregarVotoPositivo: voto2.	respuesta2 agregarVotoPositivo: voto3.	respuesta3 agregarVotoPositivo: voto4.	respuesta3 agregarVotoNegativo: voto5.	respuesta4 agregarVotoPositivo: voto6.	respuesta4 agregarVotoPositivo: voto6.	respuesta4 agregarVotoPositivo: voto7.	"Valido que el puntaje promedio de respuestas sea 1, dado que 3/3 = 1"	self assert: proxy calcularPuntajePromedioRespuestas equals: 1! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testEquals	| otroProxy |	otroProxy := proxy copy.	self assert: proxy equals: otroProxy.	otroProxy título: 'Otro texto diferente al anterior'.	self deny: (proxy equals: otroProxy)! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerRespuestas	| rta |	"LA EJECUCIÓN DE ESTE UT DEMORA 12 SEGUNDOS APROX."	"self assert: (sDAO retrieveAllByClass: pregunta class) size equals: 5."	"TC-01: Inicialización"	proxy eliminarTodasRespuestas.	sDAO deleteAllByClass: Respuesta.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	"TC-02 Pregunta sin Respuestas"	self assert: proxy conocerRespuestas isEmpty.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy respuestasSize equals: 0.	"TC-03 Agregar una Respuesta haceSemanas: 0 y repetir consulta - 1 Respuesta"	proxy activar.	rta := self crearRespuestaA: proxy haceSemanas: 0.	proxy agregarRespuesta: rta.	self assert: proxy respuestasSize equals: 1.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy conocerRespuestas size equals: 1.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy conocerRespuestas size equals: 1.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	"TC-04 Agregar 6 Respuestas haceSemanas: 0 y repetir consulta - 7 Respuestas"	0 to: 5 do: [ :x | 		rta := self crearRespuestaA: proxy haceSemanas: 0.		proxy agregarRespuesta: rta ].	self assert: proxy respuestasSize equals: 7.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	"TC-05 Agregar 1 Respuesta haceSemanas: 1 y repetir consulta  - 8 Respuestas: (7, 1)"	rta := self crearRespuestaA: proxy haceSemanas: 1.	proxy agregarRespuesta: rta.	self assert: proxy respuestasSize equals: 8.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 2.	self assert: proxy respuestasSelectionSize equals: 7.	self assert: proxy conocerRespuestas size equals: 1.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 2.	self assert: proxy respuestasSelectionSize equals: 7.	"TC-06 Agregar 1 Respuesta haceSemanas: 2 y repetir consulta  - 9 Respuestas: (7, 1, 1)"	rta := self crearRespuestaA: proxy haceSemanas: 2.	proxy agregarRespuesta: rta.	self assert: proxy respuestasSize equals: 9.	self assert: proxy respuestasWeeks equals: 2.	self assert: proxy respuestasSelectionSize equals: 7.	self assert: proxy conocerRespuestas size equals: 2.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 2.	self assert: proxy respuestasSelectionSize equals: 7.	"TC-07 Ultimo TC: Agregar 4 Respuestas haceSemanas: 3, 7 Respuestas haceSemanas: 5 y repetir consulta  - 20 Respuestas: (7, 1, 1, 4, 0, 7)"	0 to: 3 do: [ :x | 		rta := self crearRespuestaA: proxy haceSemanas: 3.		proxy agregarRespuesta: rta ].	0 to: 6 do: [ :x | 		rta := self crearRespuestaA: proxy haceSemanas: 5.		proxy agregarRespuesta: rta ].	self assert: proxy respuestasSize equals: 20.	self assert: proxy conocerRespuestas size equals: 6.	self assert: proxy respuestasWeeks equals: 5.	self assert: proxy respuestasSelectionSize equals: 13.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 1.	self assert: proxy respuestasSelectionSize equals: 0.	self assert: proxy conocerRespuestas size equals: 7.	self assert: proxy respuestasWeeks equals: 2.	self assert: proxy respuestasSelectionSize equals: 7! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testSelectRespuestasHaceSemanas	| rta |	self assert: (sDAO retrieveAllByClass: Pregunta) size equals: 4.	self assert: (proxy selectRespuestasHaceSemanas: 0) isEmpty.	self assert: (proxy selectRespuestasHaceSemanas: 1) size equals: 2.	self assert: (proxy selectRespuestasHaceSemanas: 2) isEmpty.	self assert: (proxy selectRespuestasHaceSemanas: 999) isEmpty.	proxy activar.	rta := self crearRespuestaA: proxy haceSemanas: 0.	proxy agregarRespuesta: rta.	self assert: (proxy selectRespuestasHaceSemanas: 0) isEmpty.	self assert: (proxy selectRespuestasHaceSemanas: 1) size equals: 3.	self assert: (proxy selectRespuestasHaceSemanas: 1.0) size equals: 3.	self assert: (proxy selectRespuestasHaceSemanas: 2) isEmpty.	rta := self crearRespuestaA: proxy haceSemanas: 1.	proxy agregarRespuesta: rta.	self assert: (proxy selectRespuestasHaceSemanas: 0) isEmpty.	self assert: (proxy selectRespuestasHaceSemanas: 1) size equals: 3.	self assert: (proxy selectRespuestasHaceSemanas: 2) size equals: 1.	rta := self crearRespuestaA: proxy haceSemanas: 0.	proxy agregarRespuesta: rta.	rta := self crearRespuestaA: proxy haceSemanas: 0.	proxy agregarRespuesta: rta.	self assert: (proxy selectRespuestasHaceSemanas: 1) size equals: 5! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/24/2020 00:24'!testSave	| rta pregunta2 pregunta3 pregunta4 |	self assert: proxy conocerRespuestas size equals: 2.	proxy activar.	"Agrego 50 respuestas a razón de 10 por semana"	0 to: 9 do: [ :i | 		0 to: 4 do: [ :j | 			rta := self crearRespuestaA: proxy haceSemanas: j.			proxy agregarRespuesta: rta ] ].	self assert: proxy respuestasSize equals: 52.	proxy save.	pregunta2 := proxy.	pregunta3 := proxy copy.	pregunta4 := proxy copy.	pregunta3 título: 'Otro título diferente del anterior'.	pregunta4 título: 'Otro título2 diferente del anterior'.	self assert: proxy equals: pregunta2.	self deny: (proxy equals: pregunta3).	self deny: (proxy equals: pregunta4).	self assert: pregunta2 respuestasSize equals: 52.	self assert: pregunta3 respuestasSize equals: 52.	self assert: proxy equals: pregunta2.	self deny: (proxy equals: pregunta3).	self assert: proxy respuestasSize equals: 52.	self assert: pregunta2 respuestasSize equals: 52.	self assert: pregunta3 respuestasSize equals: 52.	self assert: proxy equals: pregunta2.	self assert: proxy pregunta equals: (sDAO select: [ :preg | preg equals: proxy pregunta ] forClass: Pregunta) first! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerVotosNegativosRealista	| voto |	self assert: proxy conocerVotosNegativos isEmpty.	proxy activar.	"Agrego 50 votosNegativos a razón de 10 por semana"	0 to: 9 do: [ :i | 		0 to: 4 do: [ :j | 			voto := self crearVotoNegativoA: proxy haceSemanas: j.			proxy agregarVotoNegativo: voto ] ].	self assert: proxy votosNegativosSize equals: 50.	"Traer todas las votosNegativos demoraría 200ms * 50 = 10 segundos"	"Una ejecución del conocerVotoNegativo demora sin embargo 200ms * 10 = 2 segundos"	"...y va iterando en ciclo cerrado por las 50 votosNegativos..."	self assert: proxy conocerVotosNegativos size equals: 10! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testInitializePregunta	self assert: proxy id = 134968191.	self assert: proxy pregunta isNil.	proxy initializePregunta.	self assert: proxy id = 134968191.	self assert: proxy pregunta isNotNil.	self assert: proxy pregunta id = proxy id! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerVotosPositivosRealista	| voto |	proxy activar.	"Agrego 50 votosPositivos a razón de 10 por semana"	0 to: 9 do: [ :i | 		0 to: 4 do: [ :j | 			voto := self crearVotoPositivoA: proxy haceSemanas: j.			proxy agregarVotoPositivo: voto ] ].	self assert: proxy votosPositivosSize equals: 51.	"Traer todas las votosPositivos demoraría 200ms * 50 = 10 segundos"	"Una ejecución del conocerVotoPositivo demora sin embargo 200ms * 10 = 2 segundos"	"...y va iterando en ciclo cerrado por las 50 votosPositivos..."	self assert: proxy conocerVotosPositivos size equals: 11! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testSelectVotosPositivosHaceSemanas	| voto |	self assert: (proxy selectVotosPositivosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosPositivosHaceSemanas: 1) size equals: 1.	self assert: (proxy selectVotosPositivosHaceSemanas: 999) isEmpty.	proxy activar.	voto := self crearVotoPositivoA: proxy haceSemanas: 0.	proxy agregarVotoPositivo: voto.	self assert: (proxy selectVotosPositivosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosPositivosHaceSemanas: 1) size equals: 2.	self assert: (proxy selectVotosPositivosHaceSemanas: 1.0) size equals: 2.	self assert: (proxy selectVotosPositivosHaceSemanas: 2) isEmpty.	voto := self crearVotoPositivoA: proxy haceSemanas: 1.	proxy agregarVotoPositivo: voto.	self assert: (proxy selectVotosPositivosHaceSemanas: 0) isEmpty.	self assert: (proxy selectVotosPositivosHaceSemanas: 1) size equals: 2.	self assert: (proxy selectVotosPositivosHaceSemanas: 2) size equals: 1.	voto := self crearVotoPositivoA: proxy haceSemanas: 0.	proxy agregarVotoPositivo: voto.	voto := self crearVotoPositivoA: proxy haceSemanas: 0.	proxy agregarVotoPositivo: voto.	self assert: (proxy selectVotosPositivosHaceSemanas: 1) size equals: 4! !!PreguntaProxyTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testConocerVotosPositivos	| voto |	"LA EJECUCIÓN DE ESTE UT DEMORA 12 SEGUNDOS APROX."	"self assert: (sDAO retrieveAllByClass: pregunta class) size equals: 5."	"TC-01: Inicialización"	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	"TC-02 Pregunta sin VotosPositivos"	self assert: proxy conocerVotosPositivos size equals: 1.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy votosPositivosSize equals: 1.	"TC-03 Agregar una VotoPositivo haceSemanas: 0 y repetir consulta - 1 VotoPositivo"	proxy activar.	voto := self crearVotoPositivoA: proxy haceSemanas: 0.	proxy agregarVotoPositivo: voto.	self assert: proxy votosPositivosSize equals: 2.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy conocerVotosPositivos size equals: 2.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy conocerVotosPositivos size equals: 2.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	"TC-04 Agregar 6 VotosPositivos haceSemanas: 0 y repetir consulta - 7 VotosPositivos"	0 to: 5 do: [ :x | 		voto := self crearVotoPositivoA: proxy haceSemanas: 0.		proxy agregarVotoPositivo: voto ].	self assert: proxy votosPositivosSize equals: 8.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	"TC-05 Agregar 1 VotoPositivo haceSemanas: 1 y repetir consulta  - 8 VotosPositivos: (7, 1)"	voto := self crearVotoPositivoA: proxy haceSemanas: 1.	proxy agregarVotoPositivo: voto.	self assert: proxy votosPositivosSize equals: 9.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 2.	self assert: proxy votosPositivosSelectionSize equals: 8.	self assert: proxy conocerVotosPositivos size equals: 1.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 2.	self assert: proxy votosPositivosSelectionSize equals: 8.	"TC-06 Agregar 1 VotoPositivo haceSemanas: 2 y repetir consulta  - 9 VotosPositivos: (7, 1, 1)"	voto := self crearVotoPositivoA: proxy haceSemanas: 2.	proxy agregarVotoPositivo: voto.	self assert: proxy votosPositivosSize equals: 10.	self assert: proxy votosPositivosWeeks equals: 2.	self assert: proxy votosPositivosSelectionSize equals: 8.	self assert: proxy conocerVotosPositivos size equals: 2.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 2.	self assert: proxy votosPositivosSelectionSize equals: 8.	"TC-07 Ultimo TC: Agregar 4 VotosPositivos haceSemanas: 3, 7 VotosPositivos haceSemanas: 5 y repetir consulta  - 20 VotosPositivos: (7, 1, 1, 4, 0, 7)"	0 to: 3 do: [ :x | 		voto := self crearVotoPositivoA: proxy haceSemanas: 3.		proxy agregarVotoPositivo: voto ].	0 to: 6 do: [ :x | 		voto := self crearVotoPositivoA: proxy haceSemanas: 5.		proxy agregarVotoPositivo: voto ].	self assert: proxy votosPositivosSize equals: 21.	self assert: proxy conocerVotosPositivos size equals: 6.	self assert: proxy votosPositivosWeeks equals: 5.	self assert: proxy votosPositivosSelectionSize equals: 14.	self assert: proxy conocerVotosPositivos size equals: 7.	self assert: proxy votosPositivosWeeks equals: 1.	self assert: proxy votosPositivosSelectionSize equals: 0.	self assert: proxy conocerVotosPositivos size equals: 8.	self assert: proxy votosPositivosWeeks equals: 2.	self assert: proxy votosPositivosSelectionSize equals: 8! !!PreguntaProxyTest methodsFor: 'running' stamp: 'GitHub 4/17/2020 02:02:12'!setUp	cuooraSingleton := CuOOra new cuooraSingleton.	sDAO := SluggishDAO newSingleton.	cuooraSingleton conocerTodasPreguntas		do: [ :preg | 			sDAO put: preg.			preg conocerRespuestas do: [ :rta | sDAO put: rta ].			preg conocerVotosPositivos do: [ :vp | sDAO put: vp ].			preg conocerVotosNegativos do: [ :vn | sDAO put: vn ] ].	proxy := PreguntaProxy id: 134968191! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!PreguntaTest commentStamp: 'Julieta 3/12/2020 00:20' prior: 0!Class part:  "Represento un Test Unitario de Pregunta".Responsibility part: "Lo que hago:  Permito probar una Pregunta"Collaborators Part: "Modelo Pregunta"!!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/17/2020 02:02:12'!testId	| otraPregunta |	otraPregunta := pregunta copy.	self assert: pregunta id = otraPregunta id.	otraPregunta título: 'Otro texto diferente al anterior'.	self deny: pregunta id = otraPregunta id.	self assert: pregunta id = pregunta hash! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testActivar	self assert: pregunta activar.	self deny: pregunta estaCreada.	self deny: pregunta estaCerrada.	self assert: pregunta estaActiva! !!PreguntaTest methodsFor: 'testing' stamp: 'julirios 1/20/2020 23:36:26'!testEliminarTodasRespuestas	|usuario1 respuesta1 respuesta2 voto1|		"Inicializo usuario1 y respuesta1"	usuario1 := Usuario 		nombre: 'Gonzalo' 		contraseña: 'Gonzalo123'.		respuesta1 := Respuesta 		usuario: usuario1  		texto: 'r1'  		preguntaReferida: pregunta.   	respuesta2 := Respuesta 		usuario: usuario1  		texto: 'r2'  		preguntaReferida: pregunta.			"Agrego respuesta1 y respuesta2 a pregunta"	pregunta activar.	pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.		"Inicializo el voto1"	voto1 := Voto 		usuario: usuario1 		entrada: respuesta1.		"Agrego voto1 positivo en respuesta1"		respuesta1 agregarVotoPositivo: voto1. 		"Valido que la respuesta1 tiene un voto positivo"	self assert: respuesta1 conocerVotosPositivos size equals: 1.		"Valido que la pregunta posea dos respuestas"	self assert: pregunta conocerRespuestas size equals: 2.		"Elimino todas las respuestas de la pregunta"	pregunta eliminarTodasRespuestas.		"Valido que la pregunta no posee dos respuestas"	self deny: pregunta conocerRespuestas size = 2.		"Valido que la pregunta no posee respuestas"	self assert: pregunta conocerRespuestas isEmpty.		"Valido que la respuesta no posee votos positivos"	self assert: respuesta1 conocerVotosPositivos isEmpty. 	! !!PreguntaTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 00:46'!testHash	| otraPregunta |	otraPregunta := pregunta copy.	self assert: pregunta hash = otraPregunta hash.	otraPregunta título: 'Otro texto diferente al anterior'.	self deny: pregunta hash = otraPregunta hash! !!PreguntaTest methodsFor: 'testing' stamp: 'julirios 1/20/2020 23:36:26'!testCalcularPuntajePromedioRespuestas	| respuesta1 respuesta2 respuesta3 usuario1 usuario2 usuario3 voto1 voto2 voto3 voto4 voto5 |	"Inicializo usuario1, usuario2 y usuario3"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	usuario2 := Usuario nombre: 'Pedro' contraseña: 'Pedro123'.	usuario3 := Usuario nombre: 'Ana' contraseña: 'Ana123'.		"Inicializo respuesta1, respuesta2 y respuesta3"	respuesta1 := Respuesta		usuario: usuario1		texto: 'r1'		preguntaReferida: pregunta.	respuesta2 := Respuesta		usuario: usuario2		texto: 'r2'		preguntaReferida: pregunta.	respuesta3 := Respuesta		usuario: usuario3		texto: 'r3'		preguntaReferida: pregunta.		pregunta activar.			"Agrego respuesta1, respuesta2 y respuesta3 a pregunta"		pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.	pregunta agregarRespuesta: respuesta3.		"Valido que la pregunta posea tres respuestas"	self assert: pregunta conocerRespuestas size equals: 3.		"Valido que el puntaje promedio de las respuestas sea 0, dado que todavía no poseen votos"	self		assert: pregunta calcularPuntajePromedioRespuestas		equals: 0.			"Inicializo voto1, voto2, voto3, voto4 y voto5"		voto1 := Voto usuario: usuario2 entrada: respuesta1.	voto2 := Voto usuario: usuario3 entrada: respuesta1.	voto3 := Voto usuario: usuario1 entrada: respuesta2.	voto4 := Voto usuario: usuario1 entrada: respuesta3.	voto5 := Voto usuario: usuario2 entrada: respuesta3.		"respuesta1 posee 2 puntos a favor, respuesta2 posee 1 punto a favor y respuesta3 posee 0 puntos a favor"	respuesta1 agregarVotoPositivo: voto1.	respuesta1 agregarVotoPositivo: voto2.	respuesta2 agregarVotoPositivo: voto3.	respuesta3 agregarVotoPositivo: voto4.	respuesta3 agregarVotoNegativo: voto5.		"Valido que el puntaje promedio de respuestas sea 1, dado que 3/3 = 1"	self		assert: pregunta calcularPuntajePromedioRespuestas		equals: 1.				! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicosRelacionados	|tópico1|	self deny: pregunta conocerTópicosRelacionados isEmpty.		tópico1 := Tópico nombre: 'Color' descripción: 'Color objetos, animales'.	pregunta agregarTópicoRelacionado: tópico1.		self assert: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Reptiles' ]).	self assert: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Color' ]).	self deny: 		(pregunta conocerTópicosRelacionados anySatisfy: [ :x | x nombre = 'Naturaleza' ]).		! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: pregunta conocerTópicosRelacionados size = 0.	! !!PreguntaTest methodsFor: 'testing' stamp: 'julirios 4/13/2020 01:10:37'!testAccept	| unVisitor |	unVisitor := JsonVisitor new.	self assert: ((pregunta accept: unVisitor) isKindOf: String).	unVisitor := XmlVisitor new.	self assert: ((pregunta accept: unVisitor) isKindOf: String)! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testAgregarRespuesta	| usuario1 respuesta1 |	"Inicializo usuario1 y respuesta1"	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	respuesta1 := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta.	"Agrego respuesta1 a pregunta"	self deny: (pregunta agregarRespuesta: respuesta1).	"Valido que la colección de respuestas esté vacía, dado que la pregunta se crea en estado Creada y, en este estado, no es posible agregarle respuestas"	self assert: pregunta conocerRespuestas isEmpty.	self assert: pregunta activar.	self assert: pregunta estaActiva.	self assert: (pregunta agregarRespuesta: respuesta1).	"Valido que la colección de respuestas no esté vacía, dado que la pregunta está en estado Activa y, en este estado, es posible agregarle respuestas"	self deny: pregunta conocerRespuestas isEmpty! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testCerrar	self assert: pregunta estaCreada.	self deny: pregunta cerrar.	self assert: pregunta estaCreada.	self assert: pregunta activar.	self assert: pregunta estaActiva.	self assert: pregunta cerrar.	self assert: pregunta estaCerrada! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerRespuestas	| respuesta1 usuario1 |	self assert: pregunta conocerRespuestas isEmpty.	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	respuesta1 := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta.	pregunta activar.	pregunta agregarRespuesta: respuesta1.	self assert: pregunta conocerRespuestas size equals: 1! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testCrear	self deny: pregunta crear.	self assert: pregunta estaCreada! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testEquals	| otraPregunta |	otraPregunta := pregunta copy.	self assert: pregunta equals: otraPregunta.	otraPregunta título: 'Otro texto diferente al anterior'.	self deny: (pregunta equals: otraPregunta)! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testConocerRespuestasOrdenadas	| respuesta1 respuesta2 usuario1 usuario2 voto1 voto2 |	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	usuario2 := Usuario nombre: 'Pedro' contraseña: 'Pedro123'.	respuesta1 := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta.	respuesta2 := Respuesta usuario: usuario2 texto: 'r2' preguntaReferida: pregunta.	pregunta activar.	pregunta agregarRespuesta: respuesta1.	pregunta agregarRespuesta: respuesta2.	self assert: pregunta conocerRespuestas size equals: 2.	self assert: pregunta calcularPuntajePromedioRespuestas equals: 0.	voto1 := Voto usuario: usuario1 entrada: respuesta2.	voto2 := Voto usuario: usuario2 entrada: respuesta1.	respuesta1 agregarVotoNegativo: voto2.	respuesta2 agregarVotoPositivo: voto1.	self assert: pregunta conocerRespuestas first equals: respuesta2! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópicoRelacionado	| tópico2 |	"Iniciliazo tópico2"	tópico2 := Tópico		nombre: 'Color'		descripción: 'Color de objetos, animales'.	"Agrego tópico2 a los tópicos de la pregunta"	pregunta agregarTópicoRelacionado: tópico2.	"Valido que la pregunta tiene dos tópicos"	self		assert: pregunta conocerTópicosRelacionados size		equals: 2! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testEstaCerrada	self deny: pregunta estaCerrada.	self assert: pregunta activar.	self assert: pregunta cerrar.	self assert: pregunta estaCerrada! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testEstaCreada	self assert: pregunta estaCreada! !!PreguntaTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testEstaActiva	self deny: pregunta estaActiva.	self assert: pregunta activar.	self assert: pregunta estaActiva! !!PreguntaTest methodsFor: 'running' stamp: 'GitHub 4/14/2020 01:04:13'!setUp	| usuario1 tópico1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color Serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'respuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!RespuestaTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de Respuesta".Responsibility part: "Lo que hago:  Permito probar una Respuesta"Collaborators Part: "Modelo Respuesta"!!RespuestaTest methodsFor: 'running' stamp: 'GonzaloUlla 4/16/2020 23:08'!setUp	| usuario |	usuario := Usuario nombre: 'u0' contraseña: 'u0'.	respuesta := Respuesta		usuario: usuario		texto: 'r0'		preguntaReferida:			(Pregunta				usuario: usuario				título: 'p0'				texto: 'p0'				tópicoRelacionado: (Tópico nombre: 't0' descripción: 't0'))! !!RespuestaTest methodsFor: 'testing' stamp: 'julirios 4/13/2020 01:10:37'!testAccept	| unVisitor |	unVisitor := JsonVisitor new.	self assert: ((respuesta accept: unVisitor) isKindOf: String).	unVisitor := XmlVisitor new.	self assert: ((respuesta accept: unVisitor) isKindOf: String)! !!RespuestaTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:09'!testDentroDeMejoresRespuestas	"Retorna true/false dependiendo si el puntaje de la Respuesta es mayor o igual al promedio de puntaje de todas las respuestas a esa Pregunta"	"^ self calcularPuntaje >= preguntaReferida calcularPuntajePromedioRespuestas"	| pregunta1 respuesta2 respuesta3 usuario1 usuario2 usuario3 voto1 voto2 voto3 voto4 voto5 |	"Inicializo usuario1, usuario2 y usuario3"	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario3 := Usuario nombre: 'u3' contraseña: 'u3'.	"Inicializo pregunta1"	pregunta1 := Pregunta		usuario: usuario1		título: 'p1'		texto: 'p1'		tópicoRelacionado: 't1'.	"Inicializo respuesta, respuesta2 y respuesta3"	respuesta := Respuesta usuario: usuario1 texto: 'r1' preguntaReferida: pregunta1.	respuesta2 := Respuesta usuario: usuario2 texto: 'r2' preguntaReferida: pregunta1.	respuesta3 := Respuesta usuario: usuario3 texto: 'r3' preguntaReferida: pregunta1.	"Agrego respuesta, respuesta2 y respuesta3 a pregunta"	pregunta1 activar.	pregunta1 agregarRespuesta: respuesta.	pregunta1 agregarRespuesta: respuesta2.	pregunta1 agregarRespuesta: respuesta3.	"Valido que la pregunta posea tres respuestas"	self assert: pregunta1 conocerRespuestas size equals: 3.	"Valido que el puntaje promedio de las respuestas sea 0, dado que todavía no poseen votos"	self assert: pregunta1 calcularPuntajePromedioRespuestas equals: 0.	"Inicializo voto1, voto2, voto3, voto4 y voto5"	voto1 := Voto usuario: usuario2 entrada: respuesta.	voto2 := Voto usuario: usuario3 entrada: respuesta.	voto3 := Voto usuario: usuario1 entrada: respuesta2.	voto4 := Voto usuario: usuario1 entrada: respuesta3.	voto5 := Voto usuario: usuario2 entrada: respuesta3.	"respuesta: +2, respuesta2: +1  y respuesta3: 0 "	respuesta agregarVotoPositivo: voto1.	respuesta agregarVotoPositivo: voto2.	respuesta2 agregarVotoPositivo: voto3.	respuesta3 agregarVotoPositivo: voto4.	respuesta3 agregarVotoNegativo: voto5.	"Valido que el puntaje promedio de respuestas sea 1, dado que 3/3 = 1"	self assert: pregunta1 calcularPuntajePromedioRespuestas equals: 1.	"2 > 1"	self assert: respuesta dentroDeMejoresRespuestas.	"1 >= 1"	self assert: respuesta2 dentroDeMejoresRespuestas.	"0 < 1"	self deny: respuesta3 dentroDeMejoresRespuestas! !!RespuestaTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:22'!testComparing	| otraRespuesta otroUsuario voto1 voto2 voto3 |	otroUsuario := Usuario nombre: 'u1' contraseña: 'u1'.	otraRespuesta := Respuesta		usuario: otroUsuario		texto: 'r1'		preguntaReferida:			(Pregunta				usuario: otroUsuario				título: 'p1'				texto: 'p1'				tópicoRelacionado: (Tópico nombre: 't1' descripción: 't1')).	"0 votos cada respuesta"	self assert: otraRespuesta = respuesta.	self assert: otraRespuesta <= respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta > respuesta.	"0 respuesta, +1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: otraRespuesta.	otraRespuesta agregarVotoPositivo: voto1.	self assert: otraRespuesta > respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta <= respuesta.	self deny: otraRespuesta < respuesta.	otraRespuesta eliminarTodosVotos.	"+1 respuesta, 0 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	respuesta agregarVotoPositivo: voto1.	self assert: otraRespuesta < respuesta.	self assert: otraRespuesta <= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta >= respuesta.	self deny: otraRespuesta > respuesta.	respuesta eliminarTodosVotos.	"-1 respuesta, -1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	voto2 := Voto usuario: otroUsuario entrada: otraRespuesta.	respuesta agregarVotoNegativo: voto1.	otraRespuesta agregarVotoNegativo: voto2.	self assert: otraRespuesta = respuesta.	self assert: otraRespuesta <= respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta > respuesta.	respuesta eliminarTodosVotos.	otraRespuesta eliminarTodosVotos.	"-2 respuesta, -1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	voto2 := Voto usuario: otroUsuario entrada: otraRespuesta.	voto3 := Voto usuario: otroUsuario entrada: respuesta.	respuesta agregarVotoNegativo: voto1.	respuesta agregarVotoNegativo: voto3.	otraRespuesta agregarVotoNegativo: voto2.	self assert: otraRespuesta > respuesta.	self assert: otraRespuesta >= respuesta.	self deny: otraRespuesta = respuesta.	self deny: otraRespuesta < respuesta.	self deny: otraRespuesta <= respuesta! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: respuesta usuario isNil.	self deny: respuesta fechaCreación isNil.	self assert: respuesta texto isNotNil.	self assert: respuesta preguntaReferida isNotNil! !!RespuestaTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 00:54'!testHash	| otraRespuesta |	otraRespuesta := respuesta copy.	self assert: respuesta hash = otraRespuesta hash.	otraRespuesta texto: 'Otro texto diferente al anterior'.	self deny: respuesta hash = otraRespuesta hash! !!RespuestaTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:22'!testEquals	| otraRespuesta otroUsuario voto1 voto2 |	otroUsuario := Usuario nombre: 'u1' contraseña: 'u1'.	otraRespuesta := Respuesta		usuario: otroUsuario		texto: 'r1'		preguntaReferida:			(Pregunta				usuario: otroUsuario				título: 'p1'				texto: 'p1'				tópicoRelacionado: (Tópico nombre: 't1' descripción: 't1')).	"0 votos cada respuesta"	self assert: otraRespuesta equals: respuesta.	voto1 := Voto usuario: otroUsuario entrada: otraRespuesta.	otraRespuesta agregarVotoPositivo: voto1.	self deny: (otraRespuesta equals: respuesta).	otraRespuesta eliminarTodosVotos.	"-1 respuesta, -1 otraRespuesta"	voto1 := Voto usuario: otroUsuario entrada: respuesta.	voto2 := Voto usuario: otroUsuario entrada: otraRespuesta.	respuesta agregarVotoNegativo: voto1.	otraRespuesta agregarVotoNegativo: voto2.	self assert: otraRespuesta equals: respuesta! !!RespuestaTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testEliminarUsuario	| usuarioCopy |	self assert: respuesta usuario isNotNil.	self assert: respuesta usuario conocerRespuestas isEmpty.	respuesta usuario agregarRespuesta: respuesta.	usuarioCopy := respuesta usuario.	self assert: respuesta usuario conocerRespuestas isNotEmpty.	self assert: usuarioCopy conocerRespuestas isNotEmpty.	respuesta eliminarUsuario.	self assert: respuesta usuario isNil.	self assert: usuarioCopy conocerRespuestas isEmpty! !TestCase subclass: #SluggishDAOTestCase	instanceVariableNames: 'sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!SluggishDAOTestCase commentStamp: 'GonzaloUlla 3/26/2020 02:07' prior: 0!Class part:  "I represent a Test Case for SlugglishDAO".Collaborators Part: SlugglishDAO!!SluggishDAOTestCase methodsFor: 'tests' stamp: 'GitHub 4/14/2020 01:04:13'!testAddObjects	sDAO put: 'unString'.	sDAO put: 'unString2'.	self assert: (sDAO retrieveAllByClass: ByteString) size equals: 2! !!SluggishDAOTestCase methodsFor: 'tests' stamp: 'GitHub 4/14/2020 01:04:13'!testLookupObjects	| col |	sDAO		put: 'unString';		put: 'unString2'.	col := sDAO select: [ :it | it includesSubstring: 'g2' ] forClass: ByteString.	self assert: col size equals: 1! !!SluggishDAOTestCase methodsFor: 'running' stamp: 'GitHub 4/14/2020 01:04:13'!setUp	sDAO := SluggishDAO newSingleton! !TestCase subclass: #TópicoTest	instanceVariableNames: 'tópico'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!TópicoTest commentStamp: 'GonzaloUlla 6/30/2019 21:39' prior: 0!Class part:  "Represento un Test Unitario de Tópico".Responsibility part: "Lo que hago:  Permito probar un Tópico"Collaborators Part: "Modelo Tópico"!!TópicoTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:23'!testEliminarPregunta	| pregunta1 pregunta2 pregunta3 usuario |	"initialization"	usuario := Usuario nombre: 'u1' contraseña: 'u1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico.	"eliminada"	pregunta2 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico.	"agregada"	pregunta3 := Pregunta		usuario: (Usuario nombre: 'otro' contraseña: 'otro')		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico.	"nunca agregada"	"add pregunta"	tópico agregarPregunta: pregunta1.	tópico agregarPregunta: pregunta2.	self assert: tópico conocerPreguntas size equals: 2.	self assert: (tópico conocerPreguntas includes: pregunta1).	self assert: (tópico conocerPreguntas includes: pregunta2).	"eliminar pregunta"	tópico eliminarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self deny: (tópico conocerPreguntas includes: pregunta1).	self assert: (tópico conocerPreguntas includes: pregunta2).	self deny: (tópico conocerPreguntas includes: pregunta3).	self should: [ tópico eliminarPregunta: pregunta3 ] raise: Error! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testNombre	self assert: tópico nombre equals: 'Reptiles'! !!TópicoTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:22'!testAgregarPregunta	| pregunta1 usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	pregunta1 := Pregunta		usuario: usuario1		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico.	tópico agregarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self assert: (tópico conocerPreguntas includes: pregunta1)! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: tópico nombre isNil.	self deny: tópico descripción isNil.	self deny: tópico conocerPreguntas isNil.	self assert: (tópico conocerPreguntas isMemberOf: OrderedCollection).	self assert: tópico nombre equals: 'Reptiles'! !!TópicoTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:23'!testConocerPreguntas	| pregunta1 usuario1 |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	pregunta1 := Pregunta		usuario: usuario1		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico.	usuario1 agregarPregunta: pregunta1.	tópico agregarPregunta: pregunta1.	self assert: tópico conocerPreguntas size equals: 1.	self assert: (tópico conocerPreguntas includes: pregunta1).	"try to modify preguntas"	tópico conocerPreguntas add: 'otra pregunta'.	self assert: tópico conocerPreguntas size equals: 1! !!TópicoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testDescripción	self assert: tópico descripción equals: 'Animales reptiles'! !!TópicoTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	tópico := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!UsuarioTest commentStamp: 'GonzaloUlla 6/30/2019 16:59' prior: 0!Class part:  "Represento un Test Unitario de Usuario".Responsibility part: "Lo que hago:  Permito probar un Usuario"Collaborators Part: "Modelo Usuario"!!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testConocerRespuestas	| pregunta1 respuesta1 respuesta2 tópico1 otroUsuario |	"initialization"	otroUsuario := Usuario nombre: 'otro usuario' contraseña: 'asd'.	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: otroUsuario		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"add pregunta"	otroUsuario agregarPregunta: pregunta1.	"respuesta"	respuesta1 := Respuesta usuario: usuario texto: 'r1' preguntaReferida: pregunta1.	"debe estar"	usuario agregarRespuesta: respuesta1.	respuesta2 := Respuesta usuario: otroUsuario texto: 'r2' preguntaReferida: pregunta1.	"NO debe estar"	otroUsuario agregarRespuesta: respuesta2.	self assert: (usuario conocerRespuestas includes: respuesta1).	self assert: usuario conocerRespuestas size equals: 1.	"try to modify respuestas"	usuario conocerRespuestas add: 'otra respuesta'.	self assert: usuario conocerRespuestas size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testEliminarRespuesta	| pregunta1 respuesta1 tópico1 |	"initialization"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"eliminada"	respuesta1 := Respuesta usuario: usuario texto: 'r1' preguntaReferida: pregunta1.	"add pregunta"	usuario agregarPregunta: pregunta1.	usuario agregarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 1.	self assert: (usuario conocerRespuestas includes: respuesta1).	"eliminar respuesta"	usuario eliminarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 0.	self deny: (usuario conocerRespuestas includes: respuesta1)! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testConocerPreguntas	| pregunta1 tópico1 |	"initialization"	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'Color serpiente'		texto: '¿De qué color es la serpiente?'		tópicoRelacionado: tópico1.	"add pregunta"	usuario agregarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.	"try to modify preguntas"	usuario conocerPreguntas add: 'otra pregunta'.	self assert: usuario conocerPreguntas size equals: 1.	"evaluate usuario"	self assert: usuario conocerPreguntas atRandom título equals: 'Color serpiente'! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 00:46'!testHash	| otroUsuario |	otroUsuario := usuario copy.	self assert: usuario hash = otroUsuario hash.	otroUsuario nombre: 'Otro nombre diferente al anterior'.	self deny: usuario hash = otroUsuario hash! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testSeguirA	usuario seguirA: (Usuario nombre: 'u1' contraseña: 'u2').	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: usuario conocerUsuariosSeguidos atRandom nombre = 'u1'.	self deny: usuario conocerUsuariosSeguidos atRandom nombre = 'u2'! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 00:45'!testEquals	| otroUsuario |	otroUsuario := usuario copy.	self assert: usuario equals: otroUsuario.	otroUsuario nombre: 'Otro nombre diferente al anterior'.	self deny: (usuario equals: otroUsuario)! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testEliminarPregunta	| pregunta1 pregunta2 pregunta3 tópico1 |	"initialization"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	pregunta1 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"eliminada"	pregunta2 := Pregunta		usuario: usuario		fechaCreación: DateAndTime now		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico1.	"agregada"	pregunta3 := Pregunta		usuario: (Usuario nombre: 'otro' contraseña: 'otro')		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico1.	"nunca agregada"	"add pregunta"	usuario agregarPregunta: pregunta1.	usuario agregarPregunta: pregunta2.	self assert: usuario conocerPreguntas size equals: 2.	self assert: (usuario conocerPreguntas includes: pregunta1).	self assert: (usuario conocerPreguntas includes: pregunta2).	"eliminar pregunta"	usuario eliminarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.	self deny: (usuario conocerPreguntas includes: pregunta1).	self assert: (usuario conocerPreguntas includes: pregunta2).	self deny: (usuario conocerPreguntas includes: pregunta3).	self should: [ usuario eliminarPregunta: pregunta3 ] raise: Error! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testAgregarRespuesta	|usuario1 tópico1 pregunta1 respuesta1|	usuario1 := Usuario nombre: 'Gonzalo' contraseña: 'Gonzalo123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta1 := Pregunta usuario: usuario1 fechaCreación: (DateAndTime now) título: 'Color serpiente' texto: '¿De qué color son las serpientes?' tópicoRelacionado: tópico1.  	respuesta1 := Respuesta usuario: usuario fechaCreación: (DateAndTime now) texto: 'Son de color verde' preguntaReferida: pregunta1. 	usuario agregarRespuesta: respuesta1.	self assert: usuario conocerRespuestas size equals: 1.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testSetHomeSocial	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	usuario setHomeSocial.	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	usuario setHomeTópicos.	self deny: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorTópicos).	usuario setHomeSocial.	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial)! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/29/2019 23:49'!testDejarDeSeguirA	| usuario1 usuario2 |	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario seguirA: usuario1.	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: (usuario esSeguidorDe: usuario1).	self deny: (usuario esSeguidorDe: usuario2).	usuario dejarDeSeguirA: usuario1.	self deny: (usuario esSeguidorDe: usuario1).	usuario dejarDeSeguirA: usuario2.	self deny: (usuario esSeguidorDe: usuario2)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testSetHomeMásRelevantes	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	usuario setHomeMásRelevantes.	self deny: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorMásRelevantes)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicos	| tópico1 tópico2 |	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't1' descripción: 't1'.	usuario agregarTópicoInterés: tópico1.	self assert: usuario conocerTópicosInterés size equals: 1.	self assert: (usuario conocerTópicosInterés includes: tópico1).	self deny: (usuario conocerTópicosInterés includes: tópico2).	"try to modify tópicos"	usuario conocerTópicosInterés add: 'otro'.	self assert: usuario conocerTópicosInterés size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 8/29/2019 19:14'!testEsSeguidorDe	| otroUsuario |	otroUsuario := Usuario nombre: 'u1' contraseña: 'u2'.	usuario seguirA: otroUsuario.	self assert: usuario conocerUsuariosSeguidos size equals: 1.	self assert: usuario conocerUsuariosSeguidos atRandom nombre equals: 'u1'.	self assert: usuario conocerUsuariosSeguidos atRandom nombre = 'u1'.	self deny: usuario conocerUsuariosSeguidos atRandom nombre = 'u2'.	self assert: (usuario esSeguidorDe: otroUsuario).	self deny: (otroUsuario esSeguidorDe: usuario)! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerUsuariosSeguidos	| usuario1 usuario2 |	"initialization"	usuario1 := Usuario nombre: 'u1' contraseña: 'u1'.	usuario2 := Usuario nombre: 'u2' contraseña: 'u2'.	usuario seguirA: usuario1.	self assert: (usuario conocerUsuariosSeguidos includes: usuario1).	self deny: (usuario conocerUsuariosSeguidos includes: usuario2).	self assert: usuario conocerUsuariosSeguidos size equals: 1.	"try to modify usuarios"	usuario conocerUsuariosSeguidos add: 'otro usuario'.	self assert: usuario conocerUsuariosSeguidos size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:24'!testConocerPreguntasRelevantes	| pregunta1 pregunta2 pregunta3 pregunta4 tópico1 tópico2 usuarioSeguido usuarioNoSeguido |	"initialization - tópicos"	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't2' descripción: 't2'.	usuario agregarTópicoInterés: tópico1.	"initialization - usuarios"	usuarioSeguido := Usuario nombre: 'seguido' contraseña: 'seguido'.	usuarioNoSeguido := Usuario nombre: 'no' contraseña: 'no'.	usuario seguirA: usuarioSeguido.	"initialization - preguntas"	pregunta1 := Pregunta		usuario: usuarioSeguido		título: 'p1'		texto: 'p1'		tópicoRelacionado: tópico1.	"usuarioSeguido, tópico de interés, debe estar 1 vez"	pregunta2 := Pregunta		usuario: usuarioNoSeguido		título: 'p2'		texto: 'p2'		tópicoRelacionado: tópico2.	"usuarioNoSeguido, NO tópico de interés, NO debe estar"	pregunta3 := Pregunta		usuario: usuarioNoSeguido		título: 'p3'		texto: 'p3'		tópicoRelacionado: tópico1.	"usuarioNoSeguido, tópico de interés, debe estar 1 vez"	pregunta4 := Pregunta		usuario: usuarioSeguido		título: 'p4'		texto: 'p4'		tópicoRelacionado: tópico2.	"usuarioSeguido, NO tópico de interés, debe estar 1 vez"	usuarioSeguido agregarPregunta: pregunta1.	usuarioNoSeguido agregarPregunta: pregunta2.	usuarioNoSeguido agregarPregunta: pregunta3.	usuarioSeguido agregarPregunta: pregunta4.	tópico1 agregarPregunta: pregunta1.	tópico1 agregarPregunta: pregunta3.	tópico2 agregarPregunta: pregunta1.	tópico2 agregarPregunta: pregunta4.	"TEST"	self assert: (usuario conocerPreguntasRelevantes includes: pregunta1).	self deny: (usuario conocerPreguntasRelevantes includes: pregunta2).	self assert: (usuario conocerPreguntasRelevantes includes: pregunta3).	self assert: (usuario conocerPreguntasRelevantes includes: pregunta4).	self assert: usuario conocerPreguntasRelevantes size equals: 3! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: usuario nombre isNil.	self deny: usuario contraseña isNil! !!UsuarioTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:23'!testAgregarPregunta	|pregunta1 tópico1|	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'. 	pregunta1 := Pregunta usuario: usuario fechaCreación: (DateAndTime now) título: 'Color serpiente' texto: '¿De qué color es la serpiente?' tópicoRelacionado: tópico1. 	usuario agregarPregunta: pregunta1.	self assert: usuario conocerPreguntas size equals: 1.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testAgregarTópicoInterés	|tópico1|	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'. 	usuario agregarTópicoInterés: tópico1.	self deny: usuario conocerTópicosInterés isEmpty.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testNombre	self assert: usuario nombre equals: 'Julieta'.! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testConocerTópicosInterés	| tópico1 tópico2 |	tópico1 := Tópico nombre: 't1' descripción: 't1'.	tópico2 := Tópico nombre: 't1' descripción: 't1'.	usuario agregarTópicoInterés: tópico1.	self assert: usuario conocerTópicosInterés size equals: 1.	self assert: (usuario conocerTópicosInterés includes: tópico1).	self deny: (usuario conocerTópicosInterés includes: tópico2).	"try to modify tópicos"	usuario conocerTópicosInterés add: 'otro'.	self assert: usuario conocerTópicosInterés size equals: 1! !!UsuarioTest methodsFor: 'testing' stamp: 'GitHub 4/14/2020 01:04:13'!testSetHomeTópicos	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	usuario setHomeTópicos.	self deny: (usuario estrategiaHomeActual isKindOf: PersonalizarPorSocial).	self assert: (usuario estrategiaHomeActual isKindOf: PersonalizarPorTópicos)! !!UsuarioTest methodsFor: 'running' stamp: 'GitHub 8/22/2019 00:06:41'!setUp	usuario := Usuario nombre: 'Julieta' contraseña: 'Julieta123' 			! !TestCase subclass: #VotoTest	instanceVariableNames: 'voto'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!VotoTest commentStamp: 'GonzaloUlla 6/30/2019 21:38' prior: 0!Class part:  "Represento un Test Unitario de Voto".Responsibility part: "Lo que hago:  Permito probar un Voto"Collaborators Part: "Modelo Voto"!!VotoTest methodsFor: 'running' stamp: 'GonzaloUlla 4/16/2020 23:25'!setUp	| usuario1 tópico1 pregunta |	usuario1 := Usuario nombre: 'Julieta' contraseña: 'Julieta123'.	tópico1 := Tópico nombre: 'Reptiles' descripción: 'Animales reptiles'.	pregunta := Pregunta usuario: usuario1 fechaCreación: (DateAndTime now) título: 'Color Serpiente' texto: '¿De qué color es la serpiente?' tópicoRelacionado: tópico1.	voto := Voto usuario: usuario1 entrada: pregunta	 ! !!VotoTest methodsFor: 'testing' stamp: 'GitHub 8/22/2019 00:06:41'!testInitialize	self deny: voto usuario isNil.	self deny: voto entrada isNil.	self assert: voto fechaCreación isNotNil! !TestCase subclass: #XmlVisitorTest	instanceVariableNames: 'visitor sDAO'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Test'!!XmlVisitorTest methodsFor: 'running' stamp: 'GonzaloUlla 4/14/2020 01:50'!setUp	visitor := XmlVisitor new.	sDAO := SluggishDAO newSingleton! !!XmlVisitorTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:25'!testVisitPregunta	| usuario1 tópico1 pregunta1 respuesta1 |	usuario1 := Usuario new.	tópico1 := Tópico new.	pregunta1 := Pregunta		usuario: usuario1		fechaCreación: DateAndTime now		título: 'Color lagarto'		texto: '¿De qué color es el lagarto?'		tópicoRelacionado: tópico1.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	pregunta1 activar.	self		assert: (visitor visitPregunta: pregunta1)		equals:			'<pregunta>' , String cr , '    <título>Color lagarto</título>'				, String cr , '    <texto>¿De qué color es el lagarto?</texto>'				, String cr , '<respuestas/>' , String cr , '</pregunta>'.	pregunta1 agregarRespuesta: respuesta1.	self		assert: (visitor visitPregunta: pregunta1)		equals:			'<pregunta>' , String cr , '    <título>Color lagarto</título>' , String cr				, '    <texto>¿De qué color es el lagarto?</texto>' , String cr				, '<respuestas><respuesta>' , String cr 				, '    <texto>Es de color verde</texto>' , String cr , '</respuesta></respuestas>'				, String cr , '</pregunta>'! !!XmlVisitorTest methodsFor: 'testing' stamp: 'GonzaloUlla 4/16/2020 23:25'!testVisitRespuesta	| usuario1 pregunta1 respuesta1 |	usuario1 := Usuario new.	pregunta1 := Pregunta new.	respuesta1 := Respuesta		usuario: usuario1		fechaCreación: DateAndTime now		texto: 'Es de color verde'		preguntaReferida: pregunta1.	self		assert: (visitor visitRespuesta: Respuesta new)		equals: '<respuesta>' , String cr , '    <texto/>' , String cr , '</respuesta>'.	self		assert: (visitor visitRespuesta: respuesta1)		equals:			'<respuesta>' , String cr , '    <texto>Es de color verde</texto>' , String cr				, '</respuesta>'! !