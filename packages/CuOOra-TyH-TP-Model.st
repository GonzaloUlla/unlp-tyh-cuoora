Object subclass: #CuOOra	instanceVariableNames: 'usuarios tópicos cuooraSingleton jsonVisitor xmlVisitor'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!CuOOra commentStamp: '<historical>' prior: 0!Class part:  "I represent CuOOra system".Responsibility part: "What I do: manage general CuOOra's entities"Collaborators Part: "Topics and Users"!!CuOOra methodsFor: 'initialization' stamp: 'julirios 4/15/2020 00:36:46'!initialize	super initialize.	tópicos := OrderedCollection new.	usuarios := OrderedCollection new.	cuooraSingleton := nil.	jsonVisitor := JsonVisitor new.	xmlVisitor := XmlVisitor new! !!CuOOra methodsFor: 'accessing' stamp: 'GonzaloUlla 4/13/2020 23:41'!xmlVisitor	^ xmlVisitor! !!CuOOra methodsFor: 'accessing' stamp: 'GonzaloUlla 4/13/2020 23:41'!jsonVisitor	^ jsonVisitor! !!CuOOra methodsFor: 'accessing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!cuooraSingleton	"Return a CuOOra instance with sample data"	| usuario1 usuario2 usuario3 usuario4 tópico1 tópico2 tópico3 pregunta1 pregunta2 pregunta3 pregunta4 respuesta1 respuesta2 respuesta3 voto1 voto2 |	cuooraSingleton		ifNil: [ cuooraSingleton := self class new.			"1- Crear y agregar usuarios"			usuario1 := Usuario nombre: 'pedro@cuoora.com' contraseña: 'pedro@cuoora.com' fechaCreación: DateAndTime now.			usuario2 := Usuario nombre: 'diego@cuoora.com' contraseña: 'diego@cuoora.com' fechaCreación: DateAndTime now.			usuario3 := Usuario nombre: 'juan@cuoora.com' contraseña: 'juan@cuoora.com' fechaCreación: DateAndTime now.			usuario4 := Usuario nombre: 'jose@cuoora.com' contraseña: 'jose@cuoora.com' fechaCreación: DateAndTime now.			cuooraSingleton agregarUsuario: usuario1.			cuooraSingleton agregarUsuario: usuario2.			cuooraSingleton agregarUsuario: usuario3.			cuooraSingleton agregarUsuario: usuario4.			"2- Crear y agregar tópicos"			tópico1 := Tópico nombre: 'OO1' descripción: 'Orientación a Objetos I'.			tópico2 := Tópico nombre: 'Smalltalk' descripción: 'Lenguaje Smalltalk'.			tópico3 := Tópico nombre: 'Test de unidad' descripción: 'Test de unidad'.			cuooraSingleton agregarTópico: tópico1.			cuooraSingleton agregarTópico: tópico2.			cuooraSingleton agregarTópico: tópico3.			"3- Usuario1: [T1, T2, T3], Usuario2: [T1, T2, T3], Usuario3: [], Usuario4: [T2]"			usuario1 agregarTópicoInterés: tópico1.			usuario1 agregarTópicoInterés: tópico2.			usuario1 agregarTópicoInterés: tópico3.			usuario2 agregarTópicoInterés: tópico1.			usuario2 agregarTópicoInterés: tópico2.			usuario2 agregarTópicoInterés: tópico3.			usuario4 agregarTópicoInterés: tópico2.			"Seguidos por U3: [U1, U2]"			usuario3 seguirA: usuario1.			usuario3 seguirA: usuario2.			"Seguidos por U2: [U4]"			usuario2 seguirA: usuario4.			"Seguidos por U1: [U3]"			usuario1 seguirA: usuario3.			"4- Crear y agregar preguntas"			"Pregunta1: {U1, [T1, T3], 'yesterday noon'}"			pregunta1 := Pregunta				usuario: usuario1				fechaCreación: DateAndTime yesterday noon				título: 'Método setUp'				texto: '¿Para qué sirve el método setUp en un Test Case?'				tópicoRelacionado: tópico1.			pregunta1 agregarTópicoRelacionado: tópico3.			usuario1 agregarPregunta: pregunta1.			tópico1 agregarPregunta: pregunta1.			tópico3 agregarPregunta: pregunta1.			"Pregunta2: {U2, [T1, T2], 'today noon'}"			pregunta2 := Pregunta				usuario: usuario2				fechaCreación: DateAndTime now noon				título: '#messageNotUnderstood'				texto: '¿Qué significa #messageNotUnderstood?'				tópicoRelacionado: tópico1.			pregunta2 agregarTópicoRelacionado: tópico2.			usuario2 agregarPregunta: pregunta2.			tópico1 agregarPregunta: pregunta2.			tópico2 agregarPregunta: pregunta2.			"Pregunta3: {U3, [T3], '20190729'}"			pregunta3 := Pregunta				usuario: usuario3				fechaCreación: (DateAndTime year: 2019 month: 7 day: 29)				título: '#subclassResponsibility'				texto: '¿Qué significa #subclassResponsibility?'				tópicoRelacionado: tópico3.			usuario3 agregarPregunta: pregunta3.			tópico3 agregarPregunta: pregunta3.			"Pregunta4: {U4, [T1], 'today midnight'}"			pregunta4 := Pregunta				usuario: usuario3				fechaCreación: DateAndTime midnight				título: 'Polimorfismo'				texto: '¿Qué implica el polimorfismo en OOP?'				tópicoRelacionado: tópico1.			usuario3 agregarPregunta: pregunta4.			tópico1 agregarPregunta: pregunta4.			"5- Crear y agregar respuestas"			pregunta1 activar.			pregunta2 activar.			"Respuesta1: {U1, P2, 'now'}"			respuesta1 := Respuesta				usuario: usuario1				fechaCreación: DateAndTime now				texto: 'Significa que el objeto que recibió el mensaje no encontró ningún método para ejecutar en respuesta'				preguntaReferida: pregunta2.			usuario1 agregarRespuesta: respuesta1.			pregunta2 agregarRespuesta: respuesta1.			"Respuesta2: {U2, P1, 'now'}"			respuesta2 := Respuesta				usuario: usuario2				fechaCreación: DateAndTime now				texto:					'Sirve para instanciar los objetos que son evaluados por el test en un único método y que se ejecute siempre antes de cada test'				preguntaReferida: pregunta1.			usuario2 agregarRespuesta: respuesta2.			pregunta1 agregarRespuesta: respuesta2.			"Respuesta3: {U3, P1, 'now'}"			respuesta3 := Respuesta				usuario: usuario3				fechaCreación: DateAndTime now				texto: 'TestCase#setUp inicializa un test y por convención forma parte del protocolo running'				preguntaReferida: pregunta1.			usuario3 agregarRespuesta: respuesta3.			pregunta1 agregarRespuesta: respuesta3.			"6- Registrar Like a pregunta"			"voto1 por usuario2 a pregunta1"			voto1 := Voto usuario: usuario2 entrada: pregunta1 fechaCreación: DateAndTime now.			pregunta1 agregarVotoPositivo: voto1.			"6- Registrar Dislike a pregunta"			"voto2 por usuario1 a pregunta2"			voto2 := Voto usuario: usuario1 entrada: pregunta2 fechaCreación: DateAndTime now.			pregunta2 agregarVotoNegativo: voto2 ].	^ cuooraSingleton! !!CuOOra methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	unaRespuesta usuario agregarRespuesta: unaRespuesta.	^ unaRespuesta preguntaReferida agregarRespuesta: unaRespuesta! !!CuOOra methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarPregunta: unaPregunta	unaPregunta usuario agregarPregunta: unaPregunta.	unaPregunta conocerTópicosRelacionados do: [ :topic | topic agregarPregunta: unaPregunta ]! !!CuOOra methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarTópico: unTópico	tópicos add: unTópico! !!CuOOra methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarUsuario: unUsuario	usuarios add: unUsuario! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!conocerTópicoSiExiste: unNombreDeTópico	"Retorna el tópico buscado si existe o nil en caso contrario"	^ tópicos detect: [ :tópico | tópico nombre = unNombreDeTópico ] ifFound: [ :foundTopic | ^ foundTopic ] ifNone: [ ^ nil ]! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!conocerUsuarioSiExiste: unUsuario	usuarios detect: [ :eachUser | eachUser = unUsuario ] ifFound: [ :eachUsuario | ^ eachUsuario ] ifNone: [ ^ nil ]! !!CuOOra methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerTodasPreguntas	| todasPreguntas |	todasPreguntas := Set new.	self conocerUsuarios do: [ :user | todasPreguntas addAll: user conocerPreguntas ].	^ todasPreguntas! !!CuOOra methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unUsuario	^ unUsuario personalizarHome: self! !!CuOOra methodsFor: 'api' stamp: 'julirios 4/15/2020 00:36:46'!exportarPreguntasJson	| json totalPreguntas índice |	totalPreguntas := 0.	índice := 1.	self conocerUsuarios		do: [ :usuario | totalPreguntas := totalPreguntas + usuario conocerPreguntas size ].	json := String new writeStream.	json nextPutAll: '{"preguntas":['.	self conocerUsuarios		do: [ :usuario | 			usuario conocerPreguntas				do: [ :pregunta | 					json nextPutAll: (pregunta accept: jsonVisitor).					índice < totalPreguntas						ifTrue: [ json nextPutAll: ',' ].					índice := índice + 1 ] ].	json		nextPutAll: ']}'.	^ json contents! !!CuOOra methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerUsuarios	"Retorna los Usuarios de CuOOra (una copia para no romper el encapsulamiento de la colección)"	^ usuarios copy! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!validarUsuarioContraseña: unUsuario	| usuarioRegistrado |	usuarioRegistrado := self conocerUsuarioSiExiste: unUsuario.	usuarioRegistrado		ifNotNil: [ usuarioRegistrado contraseña = unUsuario contraseña				ifFalse: [ usuarioRegistrado := nil ] ].	^ usuarioRegistrado! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 4/14/2020 00:29'!exportarPreguntasXml	| preguntas xml |	xml := XMLWriter new.	preguntas := OrderedCollection new.	self conocerUsuarios		do:			[ :usuario | usuario conocerPreguntas do: [ :pregunta | preguntas add: (pregunta accept: xmlVisitor) ] ].	xml := String		streamContents: [ :aStream | 			(xml on: aStream)				xml;				enablePrettyPrinting;				isEscaping: false;				tag: 'preguntas' with: preguntas ].	^ xml! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!getOrCreateTópico: unNombreDeTópico	"Retorna un tópico si existe y si no, lo crea y lo retorna"	| topic |	topic := self conocerTópicoSiExiste: unNombreDeTópico.	topic		ifNil: [ topic := Tópico nombre: unNombreDeTópico descripción: unNombreDeTópico.			self agregarTópico: topic ].	^ topic! !!CuOOra methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!eliminarPregunta: unaPregunta	"Elimina unaPregunta de todo CuOOra:		1) Elimina todos los votos de las respuestas de unaPregunta		2) Elimina todas las respuestas de unaPregunta y de sus usuarios		3) Elimina todos los votos de unaPregunta		4) Elimina unaPregunta de todos los usuarios		5) Elimina unaPregunta de todos los tópicos"	unaPregunta eliminarTodasRespuestas.	unaPregunta eliminarTodosVotos.	usuarios		do: [ :usuario | 			(usuario conocerPreguntas includes: unaPregunta)				ifTrue: [ usuario eliminarPregunta: unaPregunta ] ].	tópicos		do: [ :tópico | 			(tópico conocerPreguntas includes: unaPregunta)				ifTrue: [ tópico eliminarPregunta: unaPregunta ] ]! !!CuOOra methodsFor: 'api' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!existeTópico: unNombreDeTópico	"Retorna true si existe en CuOOra un tópico con un cierto nombre y false en caso contrario"	^ tópicos anySatisfy: [ :tópico | tópico nombre = unNombreDeTópico ]! !!CuOOra methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerTópicos	"Retorna los Tópicos de CuOOra (una copia para no romper el encapsulamiento de la colección)"	^ tópicos copy! !Object subclass: #Entrada	instanceVariableNames: 'usuario fechaCreación texto votosPositivos votosNegativos votosPositivosSize votosNegativosSize'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Entrada commentStamp: '<historical>' prior: 0!Class part:  "Represento una Entrada abstracta en CuOOra".Responsibility part: "Lo que hago: Reúno estructura común a Preguntas y Respuestas"Collaborators Part: "Preguntas, Respuestas, Votos y Usuarios"!!Entrada methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	super initialize.	fechaCreación := DateAndTime now.	texto := nil.	usuario := nil.	votosNegativos := OrderedCollection new.	votosPositivos := OrderedCollection new.	votosNegativosSize := 0.	votosPositivosSize := 0! !!Entrada methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!= otraEntrada	^ self subclassResponsibility! !!Entrada methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!hash	^ self subclassResponsibility! !!Entrada methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!equals: otraEntrada	^ self subclassResponsibility! !!Entrada methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarVotoNegativo: unVoto	unVoto esPositivo: false.	votosNegativos add: unVoto.	votosNegativosSize ifNil: [ votosNegativosSize := 0 ].	votosNegativosSize := votosNegativosSize + 1! !!Entrada methodsFor: 'api' stamp: 'GonzaloUlla 4/13/2020 22:23'!accept: unVisitor	^ self subclassResponsibility! !!Entrada methodsFor: 'api' stamp: 'julirios 1/20/2020 23:36:26'!conocerVotosNegativos	"Retorna las Votos Negativos de la Entrada (una copia para no romper el encapsulamiento de la colección)"	^ votosNegativos copy! !!Entrada methodsFor: 'api' stamp: 'julirios 1/20/2020 23:36:26'!eliminarTodosVotos	votosNegativos removeAll.	votosPositivos removeAll! !!Entrada methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarVotoPositivo: unVoto	unVoto esPositivo: true.	votosPositivos add: unVoto.	votosPositivosSize ifNil: [ votosPositivosSize := 0 ].	votosPositivosSize := votosPositivosSize + 1! !!Entrada methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!calcularPuntaje	^ votosPositivosSize - votosNegativosSize! !!Entrada methodsFor: 'api' stamp: 'julirios 1/20/2020 23:36:26'!conocerVotosPositivos	"Retorna las Votos Positivos de la Entrada (una copia para no romper el encapsulamiento de la colección)"	^ votosPositivos copy! !!Entrada methodsFor: 'api' stamp: 'julirios 1/20/2020 23:36:26'!eliminarUsuario	self usuario: nil! !!Entrada methodsFor: 'converting' stamp: 'julirios 1/20/2020 23:36:26'!asString	^ ' - Texto: ' , texto , ' - Usuario: ' , usuario nombre , ' - Fecha Creación: '		, fechaCreación asString! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!usuario: anObject	usuario := anObject! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!fechaCreación: anObject	fechaCreación := anObject! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!fechaCreación	^ fechaCreación! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!texto	^ texto! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!texto: anObject	texto := anObject! !!Entrada methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosNegativosSize	^ votosNegativosSize! !!Entrada methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosPositivosSize	^ votosPositivosSize! !!Entrada methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!usuario	^ usuario! !Object subclass: #EstadoPregunta	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!EstadoPregunta commentStamp: 'Julieta 12/16/2019 00:23' prior: 0!Class part:  "Represento un Estado de Pregunta  abstracto en CuOOra".Responsibility part: "Lo que hago: Reúno estructura común a Estados de Pregunta"Collaborators Part: "Pregunta"!!EstadoPregunta methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	super initialize.	pregunta := nil! !!EstadoPregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	self subclassResponsibility! !!EstadoPregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	self subclassResponsibility! !!EstadoPregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	self subclassResponsibility! !!EstadoPregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	self subclassResponsibility! !!EstadoPregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	self subclassResponsibility! !!EstadoPregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	self subclassResponsibility! !!EstadoPregunta methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	self subclassResponsibility! !!EstadoPregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta	^ pregunta! !!EstadoPregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta: unaPregunta	pregunta := unaPregunta! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstadoPregunta class	instanceVariableNames: ''!!EstadoPregunta class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta: unaPregunta	"Constructor de EstadoPregunta"	| nuevoEstado |	nuevoEstado := self new.	nuevoEstado pregunta: unaPregunta.	^ nuevoEstado! !EstadoPregunta subclass: #Activa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Activa commentStamp: 'Julieta 3/11/2020 23:10' prior: 0!Class part:  "Represento el estado Activa de una pregunta  en CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una pregunta que está Activa"!!Activa methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	pregunta estado: (Cerrada pregunta: pregunta).	^ true! !!Activa methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	pregunta conocerRespuestas isEmpty		ifTrue: [ pregunta estado: (Creada pregunta: pregunta).			^ true ]		ifFalse: [ ^ false ]! !!Activa methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	^ false! !!Activa methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	"Sólo se puede agregar una respuesta cuando la pregunta está activa"	pregunta insertRespuesta: unaRespuesta.	^ true! !!Activa methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	^ false! !!Activa methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	^ true! !!Activa methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	^ false! !EstadoPregunta subclass: #Cerrada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Cerrada commentStamp: 'Julieta 3/11/2020 23:16' prior: 0!Class part:  "Represento el estado Cerrada de una pregunta  en CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una pregunta que está Cerrada"!!Cerrada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	^ false! !!Cerrada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	^ false! !!Cerrada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	^ false! !!Cerrada methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	^ false! !!Cerrada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	^ false! !!Cerrada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	^ false! !!Cerrada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	^ true! !EstadoPregunta subclass: #Creada	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Creada commentStamp: 'Julieta 3/11/2020 23:17' prior: 0!Class part:  "Represento el estado Creada de una pregunta  en CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una pregunta que está Creada"!!Creada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	^ false! !!Creada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	^ false! !!Creada methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	pregunta estado: (Activa pregunta: pregunta).	^ true! !!Creada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	^ true! !!Creada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	^ false! !!Creada methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	^ false! !!Creada methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	^ false! !Object subclass: #EstrategiaPersonalizarHome	instanceVariableNames: 'usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!EstrategiaPersonalizarHome commentStamp: 'Julieta 3/17/2020 00:21' prior: 0!Class part:  "Represento una Estrategia de personalización de home en CuOOra".Responsibility part: "Lo que hago: Reúno estructura común a Estrategias de personalización de home"!!EstrategiaPersonalizarHome methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!usuario: unUsuario	usuario := unUsuario! !!EstrategiaPersonalizarHome methodsFor: 'accessing' stamp: 'GonzaloUlla 3/24/2020 18:16'!usuario	^ usuario! !!EstrategiaPersonalizarHome methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unCuoora	self subclassResponsibility! !!EstrategiaPersonalizarHome methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	super initialize.	usuario := nil! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaPersonalizarHome class	instanceVariableNames: ''!!EstrategiaPersonalizarHome class methodsFor: 'accessing' stamp: 'julirios 4/15/2020 00:11:16'!usuario: unUsuario	"Constructor de EstrategiaPersonalizarHome"	| nuevaEstrategia |	nuevaEstrategia := self new.	nuevaEstrategia usuario: unUsuario.	^ nuevaEstrategia! !EstrategiaPersonalizarHome subclass: #PersonalizarPorMásRelevantes	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!PersonalizarPorMásRelevantes commentStamp: 'Julieta 3/17/2020 00:23' prior: 0!Class part:  "Represento la estrategia PersonalizarPorMásRelevantes de CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una Estrategia para personalizar el home por preguntas más relevantes"!!PersonalizarPorMásRelevantes methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerTodasPreguntas: unCuoora	^ unCuoora conocerTodasPreguntas! !!PersonalizarPorMásRelevantes methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unCuoora	| preguntasPorCantidadRespuestas |	preguntasPorCantidadRespuestas := (self conocerPreguntasDelDía: unCuoora) asSortedCollection: [ :pregunta1 :pregunta2 | pregunta1 conocerRespuestas size > pregunta2 conocerRespuestas size ].	^ preguntasPorCantidadRespuestas! !!PersonalizarPorMásRelevantes methodsFor: 'api' stamp: 'julirios 3/17/2020 01:03:08'!conocerPreguntasDelDía: unCuoora	| preguntasDelDía |	preguntasDelDía := OrderedCollection new.	(self conocerTodasPreguntas: unCuoora)		do: [ :pregunta | 			pregunta fechaCreación asDate = Date today				ifTrue: [ preguntasDelDía add: pregunta ] ].	^ preguntasDelDía! !EstrategiaPersonalizarHome subclass: #PersonalizarPorSocial	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!PersonalizarPorSocial commentStamp: 'Julieta 3/17/2020 00:23' prior: 0!Class part:  "Represento la estrategia PersonalizarPorSocial de CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una Estrategia para personalizar el home por preguntas de usuarios seguidos"!!PersonalizarPorSocial methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unCuoora	| preguntasDeUsuariosPorVotos |	preguntasDeUsuariosPorVotos := (self conocerPreguntasDeUsuariosSeguidosPorSemanaPor: usuario) asSortedCollection: [ :pregunta1 :pregunta2 | pregunta1 calcularPuntaje > pregunta2 calcularPuntaje ].	^ preguntasDeUsuariosPorVotos! !!PersonalizarPorSocial methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerPreguntasDeUsuariosSeguidosPor: unUsuario	| preguntasDeUsuariosSeguidos |	preguntasDeUsuariosSeguidos := Set new.	unUsuario conocerUsuariosSeguidos do: [ :user | preguntasDeUsuariosSeguidos addAll: user conocerPreguntas ].	^ preguntasDeUsuariosSeguidos! !!PersonalizarPorSocial methodsFor: 'api' stamp: 'julirios 3/17/2020 01:03:08'!conocerPreguntasDeUsuariosSeguidosPorSemanaPor: unUsuario	| preguntasDeUsuariosPorSemana |	preguntasDeUsuariosPorSemana := OrderedCollection new.	(self conocerPreguntasDeUsuariosSeguidosPor: unUsuario)		do: [ :pregunta | 			pregunta fechaCreación asDate > (Date today - 7 days)				ifTrue: [ preguntasDeUsuariosPorSemana add: pregunta ] ].	^ preguntasDeUsuariosPorSemana! !EstrategiaPersonalizarHome subclass: #PersonalizarPorTópicos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!PersonalizarPorTópicos commentStamp: 'Julieta 3/17/2020 00:24' prior: 0!Class part:  "Represento la estrategia PersonalizarPorTópicos de CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento de una Estrategia para personalizar el home por preguntas de tópicos de interés"!!PersonalizarPorTópicos methodsFor: 'api' stamp: 'julirios 3/17/2020 01:03:08'!conocerPreguntasPorTópicosInterésPorSemanaDe: unUsuario	| preguntasPorTópicosPorSemana |	preguntasPorTópicosPorSemana := OrderedCollection new.	(self conocerPreguntasPorTópicosInterésDe: unUsuario)		do: [ :pregunta | 			pregunta fechaCreación asDate > (Date today - 7 days)				ifTrue: [ preguntasPorTópicosPorSemana add: pregunta ] ].	^ preguntasPorTópicosPorSemana! !!PersonalizarPorTópicos methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerPreguntasPorTópicosInterésDe: unUsuario	| preguntasPorTópicosInterés |	preguntasPorTópicosInterés := Set new.	unUsuario conocerTópicosInterés do: [ :tópico | preguntasPorTópicosInterés addAll: tópico conocerPreguntas ].	^ preguntasPorTópicosInterés! !!PersonalizarPorTópicos methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unCuoora	| preguntasPorTópicosPorFechaCreación |	preguntasPorTópicosPorFechaCreación := (self conocerPreguntasPorTópicosInterésPorSemanaDe: usuario)		asSortedCollection: [ :pregunta1 :pregunta2 | pregunta1 fechaCreación < pregunta2 fechaCreación ].	^ preguntasPorTópicosPorFechaCreación! !Entrada subclass: #PreguntaSubject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!PreguntaSubject commentStamp: 'GonzaloUlla 3/25/2020 02:18' prior: 0!Class part:  "I represent an Abstract Subject of a Pregunta".Responsibility part: Reúno el protocolo que puede responder una pregunta.Collaborators Part: Tanto Pregunta, el Sujeto Real, como PreguntaProxy implementan el protocolo definido por mí.!!PreguntaSubject methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'private' stamp: 'GitHub 4/14/2020 01:04:13'!insertRespuesta: unaRespuesta	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerRespuestas	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!calcularPuntajePromedioRespuestas	"Retorna el puntaje promedio de todas las Respuestas a la Pregunta"	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarTópicoRelacionado: unTópico	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerTópicosRelacionados	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!eliminarTodasRespuestas	"Elimina todos los Votos de cada Respuesta y luego todas las Respuestas de sus usuarios y de la Pregunta"	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'converting' stamp: 'GitHub 4/14/2020 01:04:13'!asString	"Retorna una Pregunta como un String"	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!= otraPreguntaSubject	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!hash	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!equals: otherObject	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosPositivosSize	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!respuestasSize	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!estado: unEstado	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!estado	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!título	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!título: anObject	^ self subclassResponsibility! !!PreguntaSubject methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosNegativosSize	^ self subclassResponsibility! !PreguntaSubject subclass: #Pregunta	instanceVariableNames: 'id título tópicosRelacionados respuestas estado respuestasSize'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Pregunta commentStamp: 'GonzaloUlla 6/30/2019 16:55' prior: 0!Class part:  "Represento una Pregunta en CuOOra".Responsibility part: "Lo que hago:  Permito crear y gestionar una Pregunta"Collaborators Part: "Tópico, Respuestas, Votos y Usuarios"!!Pregunta methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	"Inicialización de una Pregunta"	super initialize.	título := nil.	tópicosRelacionados := OrderedCollection new.	respuestas := SortedCollection		sortBlock: [ :respuesta1 :respuesta2 | respuesta1 calcularPuntaje > respuesta2 calcularPuntaje ].	estado := Creada pregunta: self.	respuestasSize := 0! !!Pregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCreada	^ self estado estaCreada ! !!Pregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaActiva	^ self estado estaActiva ! !!Pregunta methodsFor: 'state tracking' stamp: 'GitHub 4/14/2020 01:04:13'!estaCerrada	^ self estado estaCerrada ! !!Pregunta methodsFor: 'private ' stamp: 'GitHub 4/14/2020 01:04:13'!insertRespuesta: unaRespuesta	respuestas add: unaRespuesta.	respuestasSize := respuestasSize + 1! !!Pregunta methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!= otraPregunta	^ self usuario = otraPregunta usuario		and: [ self título = otraPregunta título and: [ self texto = otraPregunta texto ] ]! !!Pregunta methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!hash	^ (self usuario hash bitXor: self título hash) bitXor: self texto hash! !!Pregunta methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!equals: otraPregunta	^ self = otraPregunta! !!Pregunta methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!agregarTópicoRelacionado: unTópico	tópicosRelacionados add: unTópico! !!Pregunta methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	^ self estado agregarRespuesta: unaRespuesta! !!Pregunta methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!calcularPuntajePromedioRespuestas	"Retorna el puntaje promedio de todas las Respuestas a la Pregunta"	| puntajeTotal |	puntajeTotal := 0.	respuestas do: [ :respuesta | puntajeTotal := puntajeTotal + respuesta calcularPuntaje ].	^ (puntajeTotal / respuestas size) asFloat! !!Pregunta methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerTópicosRelacionados	^ tópicosRelacionados copy! !!Pregunta methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:22'!eliminarTodasRespuestas	"Elimina todos los Votos de cada Respuesta y luego todas las Respuestas de sus usuarios y de la Pregunta"	respuestas do: [ :respuesta | respuesta eliminarTodosVotos eliminarUsuario ].	respuestas removeAll.	respuestasSize := 0! !!Pregunta methodsFor: 'api' stamp: 'julirios 4/11/2020 17:16:21'!accept: unVisitor	^ unVisitor visitPregunta: self! !!Pregunta methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!conocerRespuestas	^ respuestas copy! !!Pregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!cerrar	^ self estado cerrar! !!Pregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!crear	^ self estado crear! !!Pregunta methodsFor: 'changing state' stamp: 'GitHub 4/14/2020 01:04:13'!activar	^ self estado activar! !!Pregunta methodsFor: 'converting' stamp: 'GitHub 8/22/2019 00:06:41'!asString	"Retorna una Pregunta como un String"	| tópicos |	tópicos := ''.	tópicosRelacionados do: [ :x | tópicos := tópicos , x nombre , ' ' ].	^ String cr , 'Título: ' , título , ' - Tópicos Relacionados: ' , tópicos , super asString! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!respuestasSize	^ respuestasSize! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosNegativosSize	^ votosNegativosSize! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!título: anObject	título := anObject! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!estado: unEstado	estado := unEstado! !!Pregunta methodsFor: 'accessing' stamp: 'GonzaloUlla 4/16/2020 23:41'!id	^ self hash! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!título	^ título! !!Pregunta methodsFor: 'accessing' stamp: 'GonzaloUlla 4/16/2020 23:38'!id: unId	id := unId! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta	^ self! !!Pregunta methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosPositivosSize	^ votosPositivosSize! !!Pregunta methodsFor: 'accessing' stamp: 'julirios 1/20/2020 23:36:26'!estado	^ estado! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'instance creation' stamp: 'GonzaloUlla 4/16/2020 23:39'!usuario: unUsuario fechaCreación: unaFecha título: unTítulo texto: unTexto tópicoRelacionado: unTópico	"Constructor de Pregunta"	| nuevaPregunta |	nuevaPregunta := self new.	nuevaPregunta usuario: unUsuario.	nuevaPregunta fechaCreación: unaFecha.	nuevaPregunta título: unTítulo.	nuevaPregunta texto: unTexto.	nuevaPregunta agregarTópicoRelacionado: unTópico.	nuevaPregunta id: ((unUsuario hash bitXor: unTítulo hash) bitXor: unTexto hash).	^ nuevaPregunta! !!Pregunta class methodsFor: 'instance creation' stamp: 'GonzaloUlla 4/16/2020 23:39'!usuario: unUsuario título: unTítulo texto: unTexto tópicoRelacionado: unTópico	"Constructor de Pregunta"	| nuevaPregunta |	nuevaPregunta := self new.	nuevaPregunta usuario: unUsuario.	nuevaPregunta fechaCreación: DateAndTime now.	nuevaPregunta título: unTítulo.	nuevaPregunta texto: unTexto.	nuevaPregunta agregarTópicoRelacionado: unTópico.	nuevaPregunta id: ((unUsuario hash bitXor: unTítulo hash) bitXor: unTexto hash).	^ nuevaPregunta! !PreguntaSubject subclass: #PreguntaProxy	instanceVariableNames: 'id pregunta sDAO respuestasWeeks votosPositivosWeeks votosNegativosWeeks respuestasSelectionSize votosPositivosSelectionSize votosNegativosSelectionSize'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!PreguntaProxy commentStamp: 'GonzaloUlla 3/25/2020 02:27' prior: 0!Class part: "Represento un intermediario entre la capa de acceso a datos (SluggishDAO) y una Pregunta".Responsibility part: Controlo el acceso a una preguntaCollaborators Part: Pregunta y SluggishDAO!!PreguntaProxy methodsFor: 'state tracking' stamp: 'GonzaloUlla 4/17/2020 01:20'!estaCreada	pregunta ifNil: [ self initializePregunta ].	^ pregunta estaCreada! !!PreguntaProxy methodsFor: 'state tracking' stamp: 'GonzaloUlla 4/17/2020 01:20'!estaActiva	pregunta ifNil: [ self initializePregunta ].	^ pregunta estaActiva! !!PreguntaProxy methodsFor: 'state tracking' stamp: 'GonzaloUlla 4/17/2020 01:20'!estaCerrada	pregunta ifNil: [ self initializePregunta ].	^ pregunta estaCerrada! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!respuestasSize	pregunta ifNil: [ self initializePregunta ].	^ pregunta respuestasSize! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!usuario: anObject	pregunta ifNil: [ self initializePregunta ].	pregunta usuario: anObject! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosNegativosWeeks	^ votosNegativosWeeks! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!texto: anObject	pregunta ifNil: [ self initializePregunta ].	^ pregunta texto: anObject! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!sizeThreshold	^ 5! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!estado: unEstado	pregunta ifNil: [ self initializePregunta ].	^ pregunta estado: unEstado! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosPositivosSelectionSize	^ votosPositivosSelectionSize! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta	^ pregunta! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!respuestasWeeks	^ respuestasWeeks! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!título: anObject	pregunta ifNil: [ self initializePregunta ].	^ pregunta título: anObject! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!usuario	pregunta ifNil: [ self initializePregunta ].	^ pregunta usuario! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!votosNegativosSize	pregunta ifNil: [ self initializePregunta ].	^ pregunta votosNegativosSize! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/16/2020 23:43'!id: anObject	id := anObject! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosPositivosWeeks	^ votosPositivosWeeks! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!pregunta: unaPregunta	pregunta := unaPregunta! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!votosNegativosSelectionSize	^ votosNegativosSelectionSize! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!texto	pregunta ifNil: [ self initializePregunta ].	^ pregunta texto! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!fechaCreación	pregunta ifNil: [ self initializePregunta ].	^ pregunta fechaCreación! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!estado	pregunta ifNil: [ self initializePregunta ].	^ pregunta estado! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!título	pregunta ifNil: [ self initializePregunta ].	^ pregunta título! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!votosPositivosSize	pregunta ifNil: [ self initializePregunta ].	^ pregunta votosPositivosSize! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/16/2020 23:43'!id	^ id! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GonzaloUlla 4/17/2020 00:20'!fechaCreación: anObject	pregunta ifNil: [ self initializePregunta ].	^ pregunta fechaCreación: anObject! !!PreguntaProxy methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!respuestasSelectionSize	^ respuestasSelectionSize! !!PreguntaProxy methodsFor: 'copying' stamp: 'GonzaloUlla 4/17/2020 01:20'!copy	| newPreguntaProxy |	pregunta ifNil: [ self initializePregunta ].	newPreguntaProxy := self shallowCopy postCopy.	newPreguntaProxy pregunta: pregunta copy.	newPreguntaProxy id: self id.	^ newPreguntaProxy! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!agregarTópicoRelacionado: unTópico	pregunta ifNil: [ self initializePregunta ].	^ pregunta agregarTópicoRelacionado: unTópico! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!conocerVotosPositivos	| selection auxCol |	pregunta ifNil: [ self initializePregunta ].	selection := self selectVotosPositivosHaceSemanas: votosPositivosWeeks.	votosPositivosSelectionSize := votosPositivosSelectionSize + selection size.	[ selection size < self sizeThreshold and: votosPositivosSelectionSize < self votosPositivosSize ]		whileTrue: [ votosPositivosWeeks := votosPositivosWeeks + 1.			auxCol := self selectVotosPositivosHaceSemanas: votosPositivosWeeks.			votosPositivosSelectionSize := votosPositivosSelectionSize + auxCol size.			selection addAll: auxCol ].	votosPositivosSelectionSize < self votosPositivosSize		ifTrue: [ votosPositivosWeeks := votosPositivosWeeks + 1 ]		ifFalse: [ votosPositivosSelectionSize := 0.			votosPositivosWeeks := 1 ].	^ selection! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!calcularPuntaje	pregunta ifNil: [ self initializePregunta ].	^ pregunta calcularPuntaje! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!agregarRespuesta: unaRespuesta	pregunta ifNil: [ self initializePregunta ].	^ pregunta agregarRespuesta: unaRespuesta! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!eliminarTodosVotos	pregunta ifNil: [ self initializePregunta ].	^ pregunta eliminarTodosVotos! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!conocerVotosNegativos	| selection auxCol |	pregunta ifNil: [ self initializePregunta ].	selection := self selectVotosNegativosHaceSemanas: votosNegativosWeeks.	votosNegativosSelectionSize := votosNegativosSelectionSize + selection size.	[ selection size < self sizeThreshold and: votosNegativosSelectionSize < self votosNegativosSize ]		whileTrue: [ votosNegativosWeeks := votosNegativosWeeks + 1.			auxCol := self selectVotosNegativosHaceSemanas: votosNegativosWeeks.			votosNegativosSelectionSize := votosNegativosSelectionSize + auxCol size.			selection addAll: auxCol ].	votosNegativosSelectionSize < self votosNegativosSize		ifTrue: [ votosNegativosWeeks := votosNegativosWeeks + 1 ]		ifFalse: [ votosNegativosSelectionSize := 0.			votosNegativosWeeks := 1 ].	^ selection! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!calcularPuntajePromedioRespuestas	"Retorna el puntaje promedio de todas las Respuestas a la Pregunta"	| puntajeTotal todasRespuestas respuestasSubset |	pregunta ifNil: [ self initializePregunta ].	puntajeTotal := 0.	todasRespuestas := sDAO retrieveAllByClass: Respuesta.	respuestasSubset := todasRespuestas select: [ :rta | rta preguntaReferida = pregunta ].	respuestasSubset do: [ :respuesta | puntajeTotal := puntajeTotal + respuesta calcularPuntaje ].	^ (puntajeTotal / respuestasSubset size) asFloat! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!agregarVotoNegativo: unVoto	pregunta ifNil: [ self initializePregunta ].	sDAO put: unVoto.	^ pregunta agregarVotoNegativo: unVoto! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!agregarVotoPositivo: unVoto	pregunta ifNil: [ self initializePregunta ].	sDAO put: unVoto.	^ pregunta agregarVotoPositivo: unVoto! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:18'!accept: unVisitor	pregunta ifNil: [ self initializePregunta ].	^ pregunta accept: unVisitor! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!conocerTópicosRelacionados	pregunta ifNil: [ self initializePregunta ].	^ pregunta conocerTópicosRelacionados! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!conocerRespuestas	| selection auxCol |	pregunta ifNil: [ self initializePregunta ].	selection := self selectRespuestasHaceSemanas: respuestasWeeks.	respuestasSelectionSize := respuestasSelectionSize + selection size.	[ selection size < self sizeThreshold and: respuestasSelectionSize < self respuestasSize ]		whileTrue: [ respuestasWeeks := respuestasWeeks + 1.			auxCol := self selectRespuestasHaceSemanas: respuestasWeeks.			respuestasSelectionSize := respuestasSelectionSize + auxCol size.			selection addAll: auxCol ].	respuestasSelectionSize < self respuestasSize		ifTrue: [ respuestasWeeks := respuestasWeeks + 1 ]		ifFalse: [ respuestasSelectionSize := 0.			respuestasWeeks := 1 ].	^ selection! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:19'!eliminarUsuario	pregunta ifNil: [ self initializePregunta ].	^ pregunta eliminarUsuario! !!PreguntaProxy methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:26'!eliminarTodasRespuestas	"Elimina todos los Votos de cada Respuesta y luego todas las Respuestas de sus usuarios y de la Pregunta"	pregunta ifNil: [ self initializePregunta ].	^ pregunta eliminarTodasRespuestas! !!PreguntaProxy methodsFor: 'private ' stamp: 'GonzaloUlla 4/17/2020 01:20'!insertRespuesta: unaRespuesta	pregunta ifNil: [ self initializePregunta ].	pregunta insertRespuesta: unaRespuesta.	sDAO put: unaRespuesta! !!PreguntaProxy methodsFor: 'converting' stamp: 'GonzaloUlla 4/17/2020 01:19'!asString	pregunta ifNil: [ self initializePregunta ].	^ pregunta asString! !!PreguntaProxy methodsFor: 'proxy' stamp: 'GonzaloUlla 4/17/2020 00:43'!selectVotosNegativosHaceSemanas: nSemanas	(nSemanas isNumber and: nSemanas >= 1)		ifFalse: [ ^ OrderedCollection empty ].	pregunta ifNil: [ self initializePregunta ].	^ sDAO		select: [ :voto | voto entrada = pregunta and: [ voto esPositivo not and: [ voto fechaCreación between: DateAndTime now - nSemanas weeks and: DateAndTime now - (nSemanas - 1) weeks ] ] ]		forClass: Voto! !!PreguntaProxy methodsFor: 'proxy' stamp: 'GonzaloUlla 4/17/2020 00:38'!selectRespuestasHaceSemanas: nSemanas	(nSemanas isNumber and: nSemanas >= 1)		ifFalse: [ ^ OrderedCollection empty ].	pregunta ifNil: [ self initializePregunta ].	^ sDAO		select:			[ :rta | rta preguntaReferida = pregunta and: (rta fechaCreación between: DateAndTime now - nSemanas weeks and: DateAndTime now - (nSemanas - 1) weeks) ]		forClass: Respuesta! !!PreguntaProxy methodsFor: 'proxy' stamp: 'GonzaloUlla 4/17/2020 00:43'!selectVotosPositivosHaceSemanas: nSemanas	(nSemanas isNumber and: nSemanas >= 1)		ifFalse: [ ^ OrderedCollection empty ].	pregunta ifNil: [ self initializePregunta ].	^ sDAO		select: [ :voto | voto entrada = pregunta and: [ voto esPositivo and: [ voto fechaCreación between: DateAndTime now - nSemanas weeks and: DateAndTime now - (nSemanas - 1) weeks ] ] ]		forClass: Voto! !!PreguntaProxy methodsFor: 'proxy' stamp: 'GitHub 4/14/2020 01:04:13'!save	sDAO put: self! !!PreguntaProxy methodsFor: 'comparing' stamp: 'GonzaloUlla 4/17/2020 01:01'!= otraPreguntaProxy	^ id = otraPreguntaProxy id! !!PreguntaProxy methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:44'!hash	^ pregunta hash! !!PreguntaProxy methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!equals: otraPreguntaProxy	^ pregunta equals: otraPreguntaProxy pregunta! !!PreguntaProxy methodsFor: 'initialization' stamp: 'GonzaloUlla 4/17/2020 00:22'!initialize	super initialize.	pregunta := nil.	sDAO := SluggishDAO singleton.	respuestasWeeks := 1.	votosNegativosWeeks := 1.	votosPositivosWeeks := 1.	respuestasSelectionSize := 0.	votosNegativosSelectionSize := 0.	votosPositivosSelectionSize := 0! !!PreguntaProxy methodsFor: 'initialization' stamp: 'GonzaloUlla 4/17/2020 01:31'!initializePregunta	| preguntaCollection newPregunta |	preguntaCollection := sDAO select: [ :preg | preg id = id ] forClass: Pregunta.	newPregunta := preguntaCollection isEmpty		ifTrue: [ nil ]		ifFalse: [ preguntaCollection first ].	newPregunta ifNotNil: [ newPregunta estado pregunta: self ].	pregunta := newPregunta.	^ pregunta! !!PreguntaProxy methodsFor: 'changing state' stamp: 'GonzaloUlla 4/17/2020 01:01'!cerrar	pregunta ifNil: [ self initializePregunta ].	^ pregunta cerrar! !!PreguntaProxy methodsFor: 'changing state' stamp: 'GonzaloUlla 4/17/2020 01:01'!crear	pregunta ifNil: [ self initializePregunta ].	^ pregunta crear! !!PreguntaProxy methodsFor: 'changing state' stamp: 'GonzaloUlla 4/17/2020 01:01'!activar	pregunta ifNil: [ self initializePregunta ].	^ pregunta activar! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaProxy class	instanceVariableNames: ''!!PreguntaProxy class methodsFor: 'instance creation' stamp: 'GonzaloUlla 4/16/2020 23:45'!id: unId	"Constructor de PreguntaProxy"	| nuevoProxy |	nuevoProxy := self new.	nuevoProxy id: unId.	^ nuevoProxy! !Entrada subclass: #Respuesta	instanceVariableNames: 'preguntaReferida'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Respuesta commentStamp: '<historical>' prior: 0!Class part:  "Represento una Respuesta en CuOOra".Responsibility part: "Lo que hago:  Permito crear y gestionar una Respuesta a una Pregunta"Collaborators Part: "Pregunta, Votos y Usuarios"!!Respuesta methodsFor: 'converting' stamp: 'GitHub 8/22/2019 00:06:41'!asString	^ String cr, 'Pregunta Referida: ', preguntaReferida texto, super asString.! !!Respuesta methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!preguntaReferida: unaPregunta	preguntaReferida := unaPregunta! !!Respuesta methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!preguntaReferida	^ preguntaReferida! !!Respuesta methodsFor: 'comparing' stamp: 'GitHub 4/14/2020 01:04:13'!equals: otraRespuesta	^ self = otraRespuesta! !!Respuesta methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!hash	^ (self usuario hash bitXor: self preguntaReferida hash) bitXor: self texto hash! !!Respuesta methodsFor: 'comparing' stamp: 'GitHub 8/22/2019 00:06:41'!= otraRespuesta	^ self calcularPuntaje = otraRespuesta calcularPuntaje! !!Respuesta methodsFor: 'comparing' stamp: 'GonzaloUlla 3/31/2020 15:11'!>= otraRespuesta	^ self calcularPuntaje >= otraRespuesta calcularPuntaje! !!Respuesta methodsFor: 'comparing' stamp: 'GonzaloUlla 3/31/2020 15:11'!> otraRespuesta	^ self calcularPuntaje > otraRespuesta calcularPuntaje! !!Respuesta methodsFor: 'comparing' stamp: 'GonzaloUlla 3/31/2020 15:10'!< otraRespuesta	^ self calcularPuntaje < otraRespuesta calcularPuntaje! !!Respuesta methodsFor: 'comparing' stamp: 'GonzaloUlla 3/31/2020 15:10'!<= otraRespuesta	^ self calcularPuntaje <= otraRespuesta calcularPuntaje! !!Respuesta methodsFor: 'api' stamp: 'julirios 4/11/2020 17:16:21'!accept: unVisitor	^ unVisitor visitRespuesta: self! !!Respuesta methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!calcularPuntaje	^ votosPositivos size - votosNegativos size! !!Respuesta methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!eliminarUsuario	"Elimina el Usuario de la Respuesta y la Respuesta del Usuario"	(usuario conocerRespuestas includes: self)		ifTrue: [ usuario eliminarRespuesta: self ].	super eliminarUsuario! !!Respuesta methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!dentroDeMejoresRespuestas	"Retorna true/false dependiendo si el puntaje de la Respuesta es mayor o igual al promedio de puntaje de todas las respuestas a esa Pregunta"	^ self calcularPuntaje >= preguntaReferida calcularPuntajePromedioRespuestas! !!Respuesta methodsFor: 'initialization' stamp: 'julirios 4/13/2020 01:10:37'!initialize	"Inicialización de una Respuesta"	super initialize.	preguntaReferida := nil! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!usuario: unUsuario fechaCreación: unaFecha texto: unTexto preguntaReferida: unaPregunta	"Constructor de Respuesta"	| nuevaRespuesta |	nuevaRespuesta := self new.	nuevaRespuesta usuario: unUsuario.	nuevaRespuesta fechaCreación: unaFecha.	nuevaRespuesta texto: unTexto.	nuevaRespuesta preguntaReferida: unaPregunta.	^ nuevaRespuesta! !!Respuesta class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!usuario: unUsuario texto: unTexto preguntaReferida: unaPregunta	"Constructor de Respuesta"	| nuevaRespuesta |	nuevaRespuesta := self new.	nuevaRespuesta usuario: unUsuario.	nuevaRespuesta fechaCreación: DateAndTime now.	nuevaRespuesta texto: unTexto.	nuevaRespuesta preguntaReferida: unaPregunta.	^ nuevaRespuesta! !Object subclass: #SluggishDAO	instanceVariableNames: 'bag'	classVariableNames: 'UniqueInstance'	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!SluggishDAO commentStamp: '<historical>' prior: 0!Class part:  "I represent an abstraction layer to access data".Responsibility part: I know many performance-optimized ways to access data stored and in memory.Collaborators Part: Any other class!!SluggishDAO methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	bag := Dictionary new.	^ self! !!SluggishDAO methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initializeOrGetCollectionFor: aClass	"inicialización lazy de las coleccion de un objeto"	^ bag at: aClass ifAbsentPut: OrderedCollection new! !!SluggishDAO methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!select: aBlock forClass: aClass	"retorna elementos que satisfacen un bloque demorando 200ms por cada objeto de la colección "	| col selection |	col := self initializeOrGetCollectionFor: aClass.	selection := col select: aBlock.	(Delay forMilliseconds: 200 * selection size) wait.	^ selection! !!SluggishDAO methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!put: anObject	"almacena un objeto en memoria"	| col |	col := self initializeOrGetCollectionFor: anObject class.	col add: anObject! !!SluggishDAO methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!retrieveAllByClass: aClass	"retorna todos los elementos almacenados en memoria de una clase demorando 1 segundo"	(Delay forMilliseconds: 1000) wait.	^ OrderedCollection newFrom: (self initializeOrGetCollectionFor: aClass)! !!SluggishDAO methodsFor: 'api' stamp: 'GonzaloUlla 4/17/2020 01:32'!deleteAllByClass: aClass	"elimina todos los elementos almacenados en memoria de una clase demorando 1 segundo"	(Delay forMilliseconds: 1000) wait.	^ bag at: aClass put: OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SluggishDAO class	instanceVariableNames: ''!!SluggishDAO class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!newSingleton	UniqueInstance := self basicNew initialize.	^ UniqueInstance! !!SluggishDAO class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!singleton	UniqueInstance ifNil: [ UniqueInstance := self basicNew initialize ].	^ UniqueInstance! !!SluggishDAO class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!new	^ self error: 'Use #singleton or #newSingleton to get an instance of Class ' , self name! !Object subclass: #Tópico	instanceVariableNames: 'nombre descripción preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Tópico commentStamp: '<historical>' prior: 0!Class part:  "Represento un Tópico en CuOOra".Responsibility part: "Lo que hago:  Permito crear y gestionar un Tópico"Collaborators Part: "Preguntas y Usuarios"!!Tópico methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!eliminarPregunta: unaPregunta	^ preguntas remove: unaPregunta! !!Tópico methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!agregarPregunta: unaPregunta	^ preguntas add: unaPregunta! !!Tópico methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerPreguntas	"Retorna las Preguntas referidas al Tópico (una copia para no romper el encapsulamiento de la colección)"	^ preguntas copy! !!Tópico methodsFor: 'initialization' stamp: 'julirios 4/13/2020 01:10:37'!initialize	"Inicialización de un Tópico"	super initialize.	nombre := nil.	descripción := nil.	preguntas := OrderedCollection new! !!Tópico methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!nombre	^ nombre! !!Tópico methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!descripción	^ descripción! !!Tópico methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!nombre: anObject	nombre := anObject! !!Tópico methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!descripción: anObject	descripción := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tópico class	instanceVariableNames: ''!!Tópico class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!nombre: unNombre descripción: unaDescripción	"Constructor de Tópico"	| nuevoTópico |	nuevoTópico := self new.	nuevoTópico nombre: unNombre.	nuevoTópico descripción: unaDescripción.	^ nuevoTópico! !Object subclass: #Usuario	instanceVariableNames: 'nombre contraseña fechaCreación tópicosInterés sigueA preguntas respuestas estrategiaHomeActual'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Usuario commentStamp: '<historical>' prior: 0!Class part:  "Represento un Usuario en CuOOra".Responsibility part: "Lo que hago:  Permito crear y gestionar un Usuario, sus Preguntas y Respuestas, y sus Votos"Collaborators Part: "Preguntas, Respuestas, Votos y Tópicos"!!Usuario methodsFor: 'initialization' stamp: 'julirios 4/15/2020 00:11:16'!initialize	"Inicialización de un Usuario"	super initialize.	nombre := nil.	contraseña := nil.	fechaCreación := DateAndTime now.	tópicosInterés := OrderedCollection new.	sigueA := OrderedCollection new.	preguntas := OrderedCollection new.	respuestas := OrderedCollection new.	estrategiaHomeActual := PersonalizarPorSocial usuario: self! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!contraseña	^ contraseña! !!Usuario methodsFor: 'accessing' stamp: 'julirios 3/17/2020 01:03:08'!estrategiaHomeActual	^ estrategiaHomeActual! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!fechaCreación	^ fechaCreación! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!nombre: anObject	nombre := anObject! !!Usuario methodsFor: 'accessing' stamp: 'julirios 3/17/2020 01:03:08'!estrategiaHomeActual: anObject	estrategiaHomeActual := anObject! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!fechaCreación: anObject	fechaCreación := anObject! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!nombre	^ nombre! !!Usuario methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!contraseña: anObject	contraseña := anObject! !!Usuario methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarRespuesta: unaRespuesta	respuestas add: unaRespuesta! !!Usuario methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarPregunta: unaPregunta	preguntas add: unaPregunta! !!Usuario methodsFor: 'adding' stamp: 'GitHub 4/14/2020 01:04:13'!agregarTópicoInterés: unTópico	tópicosInterés add: unTópico! !!Usuario methodsFor: 'comparing' stamp: 'GonzaloUlla 8/28/2019 01:34:53'!= otroUsuario	^ nombre = otroUsuario nombre! !!Usuario methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!hash	^ nombre hash! !!Usuario methodsFor: 'comparing' stamp: 'GonzaloUlla 4/16/2020 23:29:59'!equals: otroUsuario	^ self = otroUsuario! !!Usuario methodsFor: 'setting' stamp: 'julirios 4/15/2020 00:11:16'!setHomeTópicos	self estrategiaHomeActual: (PersonalizarPorTópicos usuario: self)! !!Usuario methodsFor: 'setting' stamp: 'julirios 4/15/2020 00:11:16'!setHomeMásRelevantes	self estrategiaHomeActual: (PersonalizarPorMásRelevantes usuario: self)! !!Usuario methodsFor: 'setting' stamp: 'julirios 4/15/2020 00:11:16'!setHomeSocial	self estrategiaHomeActual: (PersonalizarPorSocial usuario: self)! !!Usuario methodsFor: 'converting' stamp: 'GitHub 8/22/2019 00:06:41'!respuestasAsString	"Retorna Respuestas como un String"	| retorno |	retorno := 'RESPUESTAS' , String cr.	respuestas do: [ :x | retorno := retorno , x asString ].	^ retorno! !!Usuario methodsFor: 'converting' stamp: 'GitHub 8/22/2019 00:06:41'!preguntasAsString	"Retorna Preguntas como un String"	| retorno |	retorno := 'PREGUNTAS' , String cr.	preguntas do: [ :x | retorno := retorno , x asString ].	^ retorno! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!seguirA: unUsuario	sigueA add: unUsuario! !!Usuario methodsFor: 'api' stamp: 'GonzaloUlla 8/29/2019 23:52'!dejarDeSeguirA: unUsuario	sigueA remove: unUsuario ifAbsent: [ ^ false ].	^ true! !!Usuario methodsFor: 'api' stamp: 'GitHub 4/14/2020 01:04:13'!personalizarHome: unCuoora	^ estrategiaHomeActual personalizarHome: unCuoora! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerUsuariosSeguidos	"Retorna los demàs usuarios seguidos por el Usuario (una copia para no romper el encapsulamiento de la colección)"	^ sigueA copy! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!eliminarRespuesta: unaRespuesta	respuestas remove: unaRespuesta! !!Usuario methodsFor: 'api' stamp: 'GonzaloUlla 8/29/2019 19:12'!esSeguidorDe: otroUsuario	^ sigueA anySatisfy: [ :eachUser | eachUser = otroUsuario ]! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerPreguntas	"Retorna las Preguntas del Usuario (una copia para no romper el encapsulamiento de la colección)"	^ preguntas copy! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerTópicosInterés	"Retorna los Tópicos de Interés del Usuario (una copia para no romper el encapsulamiento de la colección)"	^ tópicosInterés copy! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerRespuestas	"Retorna las Respuestas del Usuario (una copia para no romper el encapsulamiento de la colección)"	^ respuestas copy! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!eliminarPregunta: unaPregunta	preguntas remove: unaPregunta! !!Usuario methodsFor: 'api' stamp: 'GitHub 8/22/2019 00:06:41'!conocerPreguntasRelevantes	"Retorna las Preguntas de los tópicos de interés del Usuario o realizada por alguno de los usuarios a quienes sigue"	| preguntasRelevantes |	preguntasRelevantes := Set new.	tópicosInterés do: [ :tópico | preguntasRelevantes addAll: tópico conocerPreguntas ].	sigueA do: [ :usuario | preguntasRelevantes addAll: usuario conocerPreguntas ].	^ preguntasRelevantes ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: 'conocerPreguntas'!!Usuario class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!nombre: unNombre contraseña: unaContraseña fechaCreación: unaFecha	"Constructor de Usuario con fecha de creación"	| nuevoUsuario |	nuevoUsuario := self new.	nuevoUsuario nombre: unNombre.	nuevoUsuario contraseña: unaContraseña.	nuevoUsuario fechaCreación: unaFecha.	nuevoUsuario estrategiaHomeActual: (PersonalizarPorSocial usuario: nuevoUsuario).	^ nuevoUsuario! !!Usuario class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!nombre: unNombre contraseña: unaContraseña	"Constructor de Usuario"	| nuevoUsuario |	nuevoUsuario := self new.	nuevoUsuario nombre: unNombre.	nuevoUsuario contraseña: unaContraseña.	nuevoUsuario fechaCreación: DateAndTime now.	nuevoUsuario estrategiaHomeActual: (PersonalizarPorSocial usuario: nuevoUsuario).	^ nuevoUsuario! !Object subclass: #Visitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Visitor commentStamp: 'Julieta 4/11/2020 22:09' prior: 0!Class part:  "Represento un Visitante  abstracto en CuOOra".Responsibility part: "Lo que hago: Reúno estructura común a Visitantes de las Entradas, ya sea Preguntas o Respuestas"Collaborators Part: "CuOOra"!!Visitor methodsFor: 'api' stamp: 'GonzaloUlla 4/13/2020 22:23'!visitRespuesta: unaRespuesta	^ self subclassResponsibility! !!Visitor methodsFor: 'api' stamp: 'GonzaloUlla 4/13/2020 22:23'!visitPregunta: unaPregunta	^ self subclassResponsibility! !Visitor subclass: #JsonVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!JsonVisitor commentStamp: 'Julieta 4/11/2020 22:11' prior: 0!Class part:  "Represento el visitante concreto JsonVisitor de una Entrada  en CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento para saber cómo visitar la información de una Entrada y generar un JSON a partir de la misma"!!JsonVisitor methodsFor: 'api' stamp: 'julirios 4/15/2020 00:36:46'!visitRespuesta: unaRespuesta	| jsonRespuesta |	jsonRespuesta := String		streamContents: [ :aStream | 			(NeoJSONWriter on: aStream)				for: Respuesta do: [ :mapping | mapping mapInstVar: #texto ];				nextPut: unaRespuesta ].	^ jsonRespuesta! !!JsonVisitor methodsFor: 'api' stamp: 'julirios 4/15/2020 00:36:46'!visitPregunta: unaPregunta	| jsonPregunta |	jsonPregunta := String		streamContents: [ :aStream | 			(NeoJSONWriter on: aStream)				for: Pregunta do: [ :mapping | mapping mapInstVars: #(título texto respuestas) ];				for: Respuesta do: [ :mapping | mapping mapInstVar: #texto ];				for: unaPregunta conocerRespuestas					customDo: [ :mapping | mapping encoder: [ :respuesta | respuesta accept: self ] ];				nextPut: unaPregunta ].	^ jsonPregunta! !Object subclass: #Voto	instanceVariableNames: 'usuario fechaCreación entrada esPositivo'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!Voto commentStamp: '<historical>' prior: 0!Class part:  "Represento un Voto en CuOOra".Responsibility part: "Lo que hago:  Permito crear un Voto, tanto positivo como negativo, a una Entrada en CuOOra"Collaborators Part: "Entradas y Usuarios"!!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!usuario	^ usuario! !!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!fechaCreación	^ fechaCreación! !!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!entrada	^ entrada! !!Voto methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!esPositivo	^ esPositivo! !!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!usuario: anObject	usuario := anObject! !!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!fechaCreación: anObject	fechaCreación := anObject! !!Voto methodsFor: 'accessing' stamp: 'GitHub 4/14/2020 01:04:13'!esPositivo: anObject	esPositivo := anObject! !!Voto methodsFor: 'accessing' stamp: 'GitHub 8/22/2019 00:06:41'!entrada: anObject	entrada := anObject! !!Voto methodsFor: 'initialization' stamp: 'GitHub 4/14/2020 01:04:13'!initialize	"Inicialización de un Voto"	fechaCreación := DateAndTime now.	esPositivo := false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!usuario: unUsuario entrada: unaEntrada	"Constructor de Voto"	| nuevoVoto |	nuevoVoto := self new.	nuevoVoto usuario: unUsuario.	nuevoVoto entrada: unaEntrada.	nuevoVoto fechaCreación: DateAndTime now.	^ nuevoVoto! !!Voto class methodsFor: 'instance creation' stamp: 'GitHub 4/14/2020 01:04:13'!usuario: unUsuario entrada: unaEntrada fechaCreación: unaFecha esPositivo: aBoolean	"Constructor de Voto"	| nuevoVoto |	nuevoVoto := self new.	nuevoVoto usuario: unUsuario.	nuevoVoto entrada: unaEntrada.	nuevoVoto fechaCreación: unaFecha.	nuevoVoto esPositivo: aBoolean.	^ nuevoVoto! !!Voto class methodsFor: 'instance creation' stamp: 'GitHub 8/22/2019 00:06:41'!usuario: unUsuario entrada: unaEntrada fechaCreación: unaFecha	"Constructor de Voto"	| nuevoVoto |	nuevoVoto := self new.	nuevoVoto usuario: unUsuario.	nuevoVoto entrada: unaEntrada.	nuevoVoto fechaCreación: unaFecha.	^ nuevoVoto! !Visitor subclass: #XmlVisitor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-TyH-TP-Model'!!XmlVisitor commentStamp: 'Julieta 4/11/2020 22:12' prior: 0!Class part:  "Represento el visitante concreto XmlVisitor de una Entrada  en CuOOra".Responsibility part: "Lo que hago:  Encapsulo el comportamiento para saber cómo visitar la información de una Entrada y generar un XML a partir de la misma"!!XmlVisitor methodsFor: 'api' stamp: 'GonzaloUlla 4/14/2020 00:25'!visitRespuesta: unaRespuesta	| xmlRespuesta |	xmlRespuesta := XMLWriter new.	xmlRespuesta := String		streamContents: [ :aStream | 			(xmlRespuesta on: aStream)				enablePrettyPrinting;				tag: 'respuesta'					with: [ xmlRespuesta tag: 'texto' with: unaRespuesta texto.					xmlRespuesta						enablePrettyPrinting;						isEscaping: false ] ].	^ xmlRespuesta! !!XmlVisitor methodsFor: 'api' stamp: 'julirios 4/13/2020 01:10:37'!visitPregunta: unaPregunta	| xmlPregunta respuestas |	xmlPregunta := XMLWriter new.	respuestas := OrderedCollection new.	unaPregunta conocerRespuestas		do: [ :respuesta | respuestas add: (respuesta accept: self) ].	xmlPregunta := String		streamContents: [ :aStream | 			(xmlPregunta on: aStream)				enablePrettyPrinting;				tag: 'pregunta'					with: [ xmlPregunta tag: 'título' with: unaPregunta título.					xmlPregunta tag: 'texto' with: unaPregunta texto.					xmlPregunta						enablePrettyPrinting;						isEscaping: false;						tag: 'respuestas' with: respuestas ] ].	^ xmlPregunta! !